# Power Function, El esqueleto posee como ejemplo como obtener la potencia de un z-test one-sample.
# Si utiliza este esqueleto deberá comentar la función que cumple cada una de las partes entregadas
power.z.test <- function(n1=NULL, sigma1=0.5,
n2=NULL,sigma2=0.5, mu.Ha=0 ,
mu.True=0, alfa=0.05){
if(is.null(n2)){
# Z crítico para cola derecha (one-sided)
Z = qnorm(1-alfa)
denominador = sigma1/sqrt(n1)
X_bar = Z*denominador + mu.Ha
numerador = X_bar - mu.True
Z = numerador/denominador
Power = 1 - pnorm(Z)
# Generación del gráfico con ggplot2
min_lim = min(rnorm(1000, mean=mu.Ha, sd=denominador)) -
round(min(rnorm(1000, mean=mu.Ha, sd=denominador)))%%10
max_lim = max(rnorm(1000, mean=mu.True, sd=denominador)) +
round(max(rnorm(1000, mean=mu.True, sd=denominador)))%%10
plot <- ggplot(data.frame(x = c(min_lim, max_lim)), aes(x)) +
stat_function(fun = dnorm, args = list(mean = mu.Ha, sd = denominador),
col='red') +
stat_function(fun = dnorm, args = list(mean = mu.True, sd = denominador),
col='blue') +
stat_function(fun = dnorm, args = list(mean = mu.True, sd = denominador),
xlim = c(X_bar,max_lim), geom = "area", fill='red') +
geom_vline(xintercept = X_bar, linetype="dotted", size=1) +
annotate(x=X_bar, y=+Inf,label="alpha", vjust=2, geom="label") +
theme_minimal() +
ggtitle("H0 vs Ha") +
xlab(expression(bar(X))) + ylab("Density")
}else {
# Condición para Two-Sample Z-test (n2 no es nulo)
Z_crit = qnorm(1 - alfa)
# Cálculo de la desviación estándar combinada
denominator = sqrt((sigma1^2 / n1) + (sigma2^2 / n2))
X_bar = Z_crit * denominator + mu.Ha
# Cálculo del Z bajo la hipótesis alternativa
numerator = X_bar - mu.True
Z_alt = numerator / denominator
Power = 1 - pnorm(Z_alt)
# Generación del gráfico para Two-Sample Z-test
min_lim = min(rnorm(1000, mean=mu.Ha, sd=denominator)) - 10
max_lim = max(rnorm(1000, mean=mu.True, sd=denominator)) + 10
plot <- ggplot(data.frame(x = c(min_lim, max_lim)), aes(x)) +
stat_function(fun = dnorm, args = list(mean = mu.Ha, sd = denominator), col='red') +
stat_function(fun = dnorm, args = list(mean = mu.True, sd = denominator), col='blue') +
stat_function(fun = dnorm, args = list(mean = mu.True, sd = denominator),
xlim = c(X_bar, max_lim), geom = "area", fill='red') +
geom_vline(xintercept = X_bar, linetype="dotted", size=1) +
annotate(x=X_bar, y=+Inf, label="alpha", vjust=2, geom="label") +
theme_minimal() +
ggtitle("H0 vs Ha - Two Sample") +
xlab(expression(bar(X))) + ylab("Density")
}
# Retorna una lista con el gráfico y la potencia calculada
return(list(plot=plot, power=Power))
}
# Plot de gráfico de potencia
# Experimentos
# Ejemplo 1: One-sample test, variando la media poblacional y alfa
mu_vals <- seq(90, 110, by=1)
powers <- sapply(mu_vals, function(mu.True) {
result <- power.z.test(n1=16, sigma1=16, mu.Ha=100, mu.True=mu.True, alfa=0.05)
return(result$power)
})
# Manipulación de estructuras
library(tidyverse)
library(dplyr)
library(tidyr)
# Para realizar plots
library(scatterplot3d)
# Manipulación de estructuras
library(tidyverse)
library(dplyr)
library(tidyr)
# Para realizar plots
install.packages('scatterplot3d')
library(scatterplot3d)
library(ggplot2)
library(plotly)
# Manipulación de varios plots en una imagen.
library(gridExtra)
# Manipulación de estructuras
library(tidyverse)
library(dplyr)
library(tidyr)
# Para realizar plots
library(scatterplot3d)
library(ggplot2)
library(plotly)
# Manipulación de varios plots en una imagen.
library(gridExtra)
# Power Function, El esqueleto posee como ejemplo como obtener la potencia de un z-test one-sample.
# Si utiliza este esqueleto deberá comentar la función que cumple cada una de las partes entregadas
power.z.test <- function(n1=NULL, sigma1=0.5,
n2=NULL,sigma2=0.5, mu.Ha=0 ,
mu.True=0, alfa=0.05){
if(is.null(n2)){
# Z crítico para cola derecha (one-sided)
Z = qnorm(1-alfa)
denominador = sigma1/sqrt(n1)
X_bar = Z*denominador + mu.Ha
numerador = X_bar - mu.True
Z = numerador/denominador
Power = 1 - pnorm(Z)
# Generación del gráfico con ggplot2
min_lim = min(rnorm(1000, mean=mu.Ha, sd=denominador)) -
round(min(rnorm(1000, mean=mu.Ha, sd=denominador)))%%10
max_lim = max(rnorm(1000, mean=mu.True, sd=denominador)) +
round(max(rnorm(1000, mean=mu.True, sd=denominador)))%%10
plot <- ggplot(data.frame(x = c(min_lim, max_lim)), aes(x)) +
stat_function(fun = dnorm, args = list(mean = mu.Ha, sd = denominador),
col='red') +
stat_function(fun = dnorm, args = list(mean = mu.True, sd = denominador),
col='blue') +
stat_function(fun = dnorm, args = list(mean = mu.True, sd = denominador),
xlim = c(X_bar,max_lim), geom = "area", fill='red') +
geom_vline(xintercept = X_bar, linetype="dotted", size=1) +
annotate(x=X_bar, y=+Inf,label="alpha", vjust=2, geom="label") +
theme_minimal() +
ggtitle("H0 vs Ha") +
xlab(expression(bar(X))) + ylab("Density")
}else {
# Condición para Two-Sample Z-test (n2 no es nulo)
Z_crit = qnorm(1 - alfa)
# Cálculo de la desviación estándar combinada
denominator = sqrt((sigma1^2 / n1) + (sigma2^2 / n2))
X_bar = Z_crit * denominator + mu.Ha
# Cálculo del Z bajo la hipótesis alternativa
numerator = X_bar - mu.True
Z_alt = numerator / denominator
Power = 1 - pnorm(Z_alt)
# Generación del gráfico para Two-Sample Z-test
min_lim = min(rnorm(1000, mean=mu.Ha, sd=denominator)) - 10
max_lim = max(rnorm(1000, mean=mu.True, sd=denominator)) + 10
plot <- ggplot(data.frame(x = c(min_lim, max_lim)), aes(x)) +
stat_function(fun = dnorm, args = list(mean = mu.Ha, sd = denominator), col='red') +
stat_function(fun = dnorm, args = list(mean = mu.True, sd = denominator), col='blue') +
stat_function(fun = dnorm, args = list(mean = mu.True, sd = denominator),
xlim = c(X_bar, max_lim), geom = "area", fill='red') +
geom_vline(xintercept = X_bar, linetype="dotted", size=1) +
annotate(x=X_bar, y=+Inf, label="alpha", vjust=2, geom="label") +
theme_minimal() +
ggtitle("H0 vs Ha - Two Sample") +
xlab(expression(bar(X))) + ylab("Density")
}
# Retorna una lista con el gráfico y la potencia calculada
return(list(plot=plot, power=Power))
}
# Plot de gráfico de potencia
# Experimentos
# Ejemplo 1: One-sample test, variando la media poblacional y alfa
mu_vals <- seq(90, 110, by=1)
powers <- sapply(mu_vals, function(mu.True) {
result <- power.z.test(n1=16, sigma1=16, mu.Ha=100, mu.True=mu.True, alfa=0.05)
return(result$power)
})
# Gráfico de la potencia vs mu.True
plot(mu_vals, powers, type='l', col='blue', main="Power vs mu.True (alfa = 0.05)",
xlab="Media de la Población", ylab="Potencia")
# Ejemplo 2: Two-sample test, variando la media poblacional y alfa
mu_vals <- seq(90, 110, by=1)
powers <- sapply(mu_vals, function(mu.True) {
result <- power.z.test(n1=16, sigma1=16, n2=16, sigma2=16, mu.Ha=100, mu.True=mu.True, alfa=0.05)
return(result$power)
})
# Gráfico de la potencia vs mu.True
plot(mu_vals, powers, type='l', col='red', main="Power vs mu.True (Two-Sample)",
xlab="Diferencia de Medias de la Población", ylab="Potencia")
# Power Function, El esqueleto posee como ejemplo como obtener la potencia de un z-test one-sample.
# Si utiliza este esqueleto deberá comentar la función que cumple cada una de las partes entregadas
power.z.test <- function(n1=NULL, sigma1=0.5,
n2=NULL,sigma2=0.5, mu.Ha=0 ,
mu.True=0, alfa=0.05){
if(is.null(n2)){
# Z crítico para cola derecha (one-sided)
Z = qnorm(1-alfa)
denominador = sigma1/sqrt(n1)
X_bar = Z*denominador + mu.Ha
numerador = X_bar - mu.True
Z = numerador/denominador
Power = 1 - pnorm(Z)
# Generación del gráfico con ggplot2
min_lim = min(rnorm(1000, mean=mu.Ha, sd=denominador)) -
round(min(rnorm(1000, mean=mu.Ha, sd=denominador)))%%10
max_lim = max(rnorm(1000, mean=mu.True, sd=denominador)) +
round(max(rnorm(1000, mean=mu.True, sd=denominador)))%%10
plot <- ggplot(data.frame(x = c(min_lim, max_lim)), aes(x)) +
stat_function(fun = dnorm, args = list(mean = mu.Ha, sd = denominador),
col='red') +
stat_function(fun = dnorm, args = list(mean = mu.True, sd = denominador),
col='blue') +
stat_function(fun = dnorm, args = list(mean = mu.True, sd = denominador),
xlim = c(X_bar,max_lim), geom = "area", fill='red') +
geom_vline(xintercept = X_bar, linetype="dotted", linewidth=1) +
annotate(x=X_bar, y=+Inf,label="alpha", vjust=2, geom="label") +
theme_minimal() +
ggtitle("H0 vs Ha") +
xlab(expression(bar(X))) + ylab("Density")
}else {
# Condición para Two-Sample Z-test (n2 no es nulo)
Z_crit = qnorm(1 - alfa)
# Cálculo de la desviación estándar combinada
denominator = sqrt((sigma1^2 / n1) + (sigma2^2 / n2))
X_bar = Z_crit * denominator + mu.Ha
# Cálculo del Z bajo la hipótesis alternativa
numerator = X_bar - mu.True
Z_alt = numerator / denominator
Power = 1 - pnorm(Z_alt)
# Generación del gráfico para Two-Sample Z-test
min_lim = min(rnorm(1000, mean=mu.Ha, sd=denominator)) - 10
max_lim = max(rnorm(1000, mean=mu.True, sd=denominator)) + 10
plot <- ggplot(data.frame(x = c(min_lim, max_lim)), aes(x)) +
stat_function(fun = dnorm, args = list(mean = mu.Ha, sd = denominator), col='red') +
stat_function(fun = dnorm, args = list(mean = mu.True, sd = denominator), col='blue') +
stat_function(fun = dnorm, args = list(mean = mu.True, sd = denominator),
xlim = c(X_bar, max_lim), geom = "area", fill='red') +
geom_vline(xintercept = X_bar, linetype="dotted", linewidth=1) +
annotate(x=X_bar, y=+Inf, label="alpha", vjust=2, geom="label") +
theme_minimal() +
ggtitle("H0 vs Ha - Two Sample") +
xlab(expression(bar(X))) + ylab("Density")
}
# Retorna una lista con el gráfico y la potencia calculada
return(list(plot=plot, power=Power))
}
# Plot de gráfico de potencia
# Experimentos
# Ejemplo 1: One-sample test, variando la media poblacional y alfa
mu_vals <- seq(90, 110, by=1)
powers <- sapply(mu_vals, function(mu.True) {
result <- power.z.test(n1=16, sigma1=16, mu.Ha=100, mu.True=mu.True, alfa=0.05)
return(result$power)
})
# Gráfico de la potencia vs mu.True
plot(mu_vals, powers, type='l', col='blue', main="Power vs mu.True (alfa = 0.05)",
xlab="Media de la Población", ylab="Potencia")
# Ejemplo 2: Two-sample test, variando la media poblacional y alfa
mu_vals <- seq(90, 110, by=1)
powers <- sapply(mu_vals, function(mu.True) {
result <- power.z.test(n1=16, sigma1=16, n2=16, sigma2=16, mu.Ha=100, mu.True=mu.True, alfa=0.05)
return(result$power)
})
# Gráfico de la potencia vs mu.True
plot(mu_vals, powers, type='l', col='red', main="Power vs mu.True (Two-Sample)",
xlab="Diferencia de Medias de la Población", ylab="Potencia")
