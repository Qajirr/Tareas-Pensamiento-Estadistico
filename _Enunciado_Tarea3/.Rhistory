# Para no fumadores
# R2
SST_nofumadores <- sum((data_notfumadores$charges - mean(data_notfumadores$charges))^2)
SSE_nofumadores <- sum((data_notfumadores$charges - charges_nofumadores)^2)
R2_nofumadores <- 1 - (SSE_nofumadores / SST_nofumadores)
R2_nofumadores
# R2 ajustado
n_nofumadores <- length(data_notfumadores$charges)
m <- 1
R2_ajustado_nofumadores <- 1 - ((1 - R2_nofumadores) * (n_nofumadores - 1) / (n_nofumadores - m - 1))
R2_ajustado_nofumadores
# GRáfico para fumadores
plot(data_fumadores$bmi, data_fumadores$charges, main = "Modelo Lineal Simple para Fumadores",
xlab = "bmi", ylab = "Charges", pch = 19)
abline(a = beta0_fumadores, b = beta1_fumadores, col = "blue", lwd = 2)
# GRáfico para no fumadores
plot(data_notfumadores$age, data_notfumadores$charges, main = "Modelo Lineal Simple para No Fumadores",
xlab = "age", ylab = "Charges", pch = 19)
abline(a = beta0_nofumadores, b = beta1_nofumadores, col = "blue", lwd = 2)
# Calculando beta 0 y beta 1 para fumadores y no fumadores
# Función para calcular los betas
calcular_betas<- function(x, y) {
beta_1 <- sum((x - mean(x)) * (y - mean(y))) / sum((x - mean(x))^2)
beta_0 <- mean(y) - beta_1 * mean(x)
list(beta0 = beta_0, beta1 = beta_1)
}
# Para fumadores
beta0_fumadores = calcular_betas(data_fumadores$bmi, data_fumadores$charges)$beta0
beta1_fumadores = calcular_betas(data_fumadores$bmi, data_fumadores$charges)$beta1
# Para no fumadores
beta0_nofumadores = calcular_betas(data_notfumadores$age, data_notfumadores$charges)$beta0
beta1_nofumadores = calcular_betas(data_notfumadores$age, data_notfumadores$charges)$beta1
# Modelos lineales resultantes
# Para fumadores
charges_fumadores <- beta0_fumadores + beta1_fumadores * data_fumadores$bmi
#Para no fumadores
charges_nofumadores <- beta0_nofumadores + beta1_nofumadores * data_notfumadores$age
#Calculo de R2 y R2 ajustado
# Para fumadores
# R2
SST_fumadores <- sum((data_fumadores$charges - mean(data_fumadores$charges))^2)
SSE_fumadores <- sum((data_fumadores$charges - charges_fumadores)^2)
R2_fumadores <- 1 - (SSE_fumadores / SST_fumadores)
R2_fumadores
# R2 ajustado
n_fumadores <- length(data_fumadores$charges)
m <- 1
R2_ajustado_fumadores <- 1 - ((1 - R2_fumadores) * (n_fumadores - 1) / (n_fumadores - m - 1))
R2_ajustado_fumadores
# Para no fumadores
# R2
SST_nofumadores <- sum((data_notfumadores$charges - mean(data_notfumadores$charges))^2)
SSE_nofumadores <- sum((data_notfumadores$charges - charges_nofumadores)^2)
R2_nofumadores <- 1 - (SSE_nofumadores / SST_nofumadores)
R2_nofumadores
# R2 ajustado
n_nofumadores <- length(data_notfumadores$charges)
m <- 1
R2_ajustado_nofumadores <- 1 - ((1 - R2_nofumadores) * (n_nofumadores - 1) / (n_nofumadores - m - 1))
R2_ajustado_nofumadores
# GRáfico para fumadores
plot(data_fumadores$bmi, data_fumadores$charges, main = "Modelo Lineal Simple para Fumadores",
xlab = "bmi", ylab = "Charges", pch = 19)
abline(a = beta0_fumadores, b = beta1_fumadores, col = "blue", lwd = 2)
# GRáfico para no fumadores
plot(data_notfumadores$age, data_notfumadores$charges, main = "Modelo Lineal Simple para No Fumadores",
xlab = "age", ylab = "Charges", pch = 19)
abline(a = beta0_nofumadores, b = beta1_nofumadores, col = "blue", lwd = 2)
# Calculando beta 0 y beta 1 para fumadores y no fumadores
# Función para calcular los betas
calcular_betas<- function(x, y) {
beta_1 <- sum((x - mean(x)) * (y - mean(y))) / sum((x - mean(x))^2)
beta_0 <- mean(y) - beta_1 * mean(x)
list(beta0 = beta_0, beta1 = beta_1)
}
# Para fumadores
beta0_fumadores = calcular_betas(data_fumadores$bmi, data_fumadores$charges)$beta0
beta1_fumadores = calcular_betas(data_fumadores$bmi, data_fumadores$charges)$beta1
# Para no fumadores
beta0_nofumadores = calcular_betas(data_notfumadores$age, data_notfumadores$charges)$beta0
beta1_nofumadores = calcular_betas(data_notfumadores$age, data_notfumadores$charges)$beta1
# Modelos lineales resultantes
# Para fumadores
charges_fumadores <- beta0_fumadores + beta1_fumadores * data_fumadores$bmi
#Para no fumadores
charges_nofumadores <- beta0_nofumadores + beta1_nofumadores * data_notfumadores$age
#Calculo de R2 y R2 ajustado
# Para fumadores
# R2
SST_fumadores <- sum((data_fumadores$charges - mean(data_fumadores$charges))^2)
SSE_fumadores <- sum((data_fumadores$charges - charges_fumadores)^2)
R2_fumadores <- 1 - (SSE_fumadores / SST_fumadores)
R2_fumadores
# R2 ajustado
n_fumadores <- length(data_fumadores$charges)
m <- 1
R2_ajustado_fumadores <- 1 - ((1 - R2_fumadores) * (n_fumadores - 1) / (n_fumadores - m - 1))
R2_ajustado_fumadores
# Para no fumadores
# R2
SST_nofumadores <- sum((data_notfumadores$charges - mean(data_notfumadores$charges))^2)
SSE_nofumadores <- sum((data_notfumadores$charges - charges_nofumadores)^2)
R2_nofumadores <- 1 - (SSE_nofumadores / SST_nofumadores)
R2_nofumadores
# R2 ajustado
n_nofumadores <- length(data_notfumadores$charges)
m <- 1
R2_ajustado_nofumadores <- 1 - ((1 - R2_nofumadores) * (n_nofumadores - 1) / (n_nofumadores - m - 1))
R2_ajustado_nofumadores
# GRáfico para fumadores
plot(data_fumadores$bmi, data_fumadores$charges, main = "Modelo Lineal Simple para Fumadores",
xlab = "bmi", ylab = "Charges", pch = 19)
abline(a = beta0_fumadores, b = beta1_fumadores, col = "blue", lwd = 2)
# GRáfico para no fumadores
plot(data_notfumadores$age, data_notfumadores$charges, main = "Modelo Lineal Simple para No Fumadores",
xlab = "age", ylab = "Charges", pch = 19)
abline(a = beta0_nofumadores, b = beta1_nofumadores, col = "blue", lwd = 2)
# Calculando beta 0 y beta 1 para fumadores y no fumadores
# Función para calcular los betas
calcular_betas<- function(x, y) {
beta_1 <- sum((x - mean(x)) * (y - mean(y))) / sum((x - mean(x))^2)
beta_0 <- mean(y) - beta_1 * mean(x)
list(beta0 = beta_0, beta1 = beta_1)
}
# Para fumadores
beta0_fumadores = calcular_betas(data_fumadores$bmi, data_fumadores$charges)$beta0
beta1_fumadores = calcular_betas(data_fumadores$bmi, data_fumadores$charges)$beta1
# Para no fumadores
beta0_nofumadores = calcular_betas(data_notfumadores$age, data_notfumadores$charges)$beta0
beta1_nofumadores = calcular_betas(data_notfumadores$age, data_notfumadores$charges)$beta1
# Modelos lineales resultantes
# Para fumadores
charges_fumadores <- beta0_fumadores + beta1_fumadores * data_fumadores$bmi
#Para no fumadores
charges_nofumadores <- beta0_nofumadores + beta1_nofumadores * data_notfumadores$age
#Calculo de R2 y R2 ajustado
# Para fumadores
# R2
SST_fumadores <- sum((data_fumadores$charges - mean(data_fumadores$charges))^2)
SSE_fumadores <- sum((data_fumadores$charges - charges_fumadores)^2)
R2_fumadores <- 1 - (SSE_fumadores / SST_fumadores)
R2_fumadores
# R2 ajustado
n_fumadores <- length(data_fumadores$charges)
m <- 1
R2_ajustado_fumadores <- 1 - ((1 - R2_fumadores) * (n_fumadores - 1) / (n_fumadores - m - 1))
R2_ajustado_fumadores
# Para no fumadores
# R2
SST_nofumadores <- sum((data_notfumadores$charges - mean(data_notfumadores$charges))^2)
SSE_nofumadores <- sum((data_notfumadores$charges - charges_nofumadores)^2)
R2_nofumadores <- 1 - (SSE_nofumadores / SST_nofumadores)
R2_nofumadores
# R2 ajustado
n_nofumadores <- length(data_notfumadores$charges)
m <- 1
R2_ajustado_nofumadores <- 1 - ((1 - R2_nofumadores) * (n_nofumadores - 1) / (n_nofumadores - m - 1))
R2_ajustado_nofumadores
# GRáfico para fumadores
plot(data_fumadores$bmi, data_fumadores$charges, main = "Modelo Lineal Simple para Fumadores",
xlab = "bmi", ylab = "Charges", pch = 19)
abline(a = beta0_fumadores, b = beta1_fumadores, col = "blue", lwd = 2)
# GRáfico para no fumadores
plot(data_notfumadores$age, data_notfumadores$charges, main = "Modelo Lineal Simple para No Fumadores",
xlab = "age", ylab = "Charges", pch = 19)
abline(a = beta0_nofumadores, b = beta1_nofumadores, col = "blue", lwd = 2)
# Calculando beta 0 y beta 1 para fumadores y no fumadores
# Función para calcular los betas
calcular_betas<- function(x, y) {
beta_1 <- sum((x - mean(x)) * (y - mean(y))) / sum((x - mean(x))^2)
beta_0 <- mean(y) - beta_1 * mean(x)
list(beta0 = beta_0, beta1 = beta_1)
}
# Para fumadores
beta0_fumadores = calcular_betas(data_fumadores$bmi, data_fumadores$charges)$beta0
beta1_fumadores = calcular_betas(data_fumadores$bmi, data_fumadores$charges)$beta1
# Para no fumadores
beta0_nofumadores = calcular_betas(data_notfumadores$age, data_notfumadores$charges)$beta0
beta1_nofumadores = calcular_betas(data_notfumadores$age, data_notfumadores$charges)$beta1
# Modelos lineales resultantes
# Para fumadores
charges_fumadores <- beta0_fumadores + beta1_fumadores * data_fumadores$bmi
#Para no fumadores
charges_nofumadores <- beta0_nofumadores + beta1_nofumadores * data_notfumadores$age
#Calculo de R2 y R2 ajustado
# Para fumadores
# R2
SST_fumadores <- sum((data_fumadores$charges - mean(data_fumadores$charges))^2)
SSE_fumadores <- sum((data_fumadores$charges - charges_fumadores)^2)
R2_fumadores <- 1 - (SSE_fumadores / SST_fumadores)
R2_fumadores
# R2 ajustado
n_fumadores <- length(data_fumadores$charges)
m <- 1
R2_ajustado_fumadores <- 1 - ((1 - R2_fumadores) * (n_fumadores - 1) / (n_fumadores - m - 1))
R2_ajustado_fumadores
# Para no fumadores
# R2
SST_nofumadores <- sum((data_notfumadores$charges - mean(data_notfumadores$charges))^2)
SSE_nofumadores <- sum((data_notfumadores$charges - charges_nofumadores)^2)
R2_nofumadores <- 1 - (SSE_nofumadores / SST_nofumadores)
R2_nofumadores
# R2 ajustado
n_nofumadores <- length(data_notfumadores$charges)
m <- 1
R2_ajustado_nofumadores <- 1 - ((1 - R2_nofumadores) * (n_nofumadores - 1) / (n_nofumadores - m - 1))
R2_ajustado_nofumadores
# GRáfico para fumadores
plot(data_fumadores$bmi, data_fumadores$charges, main = "Modelo Lineal Simple para Fumadores",
xlab = "bmi", ylab = "Charges", pch = 19)
abline(a = beta0_fumadores, b = beta1_fumadores, col = "blue", lwd = 2)
# GRáfico para no fumadores
plot(data_notfumadores$age, data_notfumadores$charges, main = "Modelo Lineal Simple para No Fumadores",
xlab = "age", ylab = "Charges", pch = 19)
abline(a = beta0_nofumadores, b = beta1_nofumadores, col = "blue", lwd = 2)
# Manipulación de estructuras
library(tidyverse)
library(dplyr)
library(tidyr)
# Para realizar plots
library(scatterplot3d)
library(ggplot2)
library(plotly)
# Manipulación de varios plots en una imagen.
library(gridExtra)
# Power Function, El esqueleto posee como ejemplo como obtener la potencia de un z-test one-sample.
# Si utiliza este esqueleto deberá comentar la función que cumple cada una de las partes entregadas
power.z.test <- function(n1=NULL, sigma1=0.5,
n2=NULL,sigma2=0.5, mu.Ha=0 ,
mu.True=0, alfa=0.05){
if(is.null(n2)){
# Z crítico para cola derecha (one-sided)
Z = qnorm(1-alfa)
# Cálculo de la media muestral asociada al Z crítico
denominador = sigma1/sqrt(n1)
X_bar = Z*denominador + mu.Ha
# Cálculo del Z bajo la hipótesis alternativa
numerador = X_bar - mu.True
Z = numerador/denominador
Power = 1 - pnorm(Z)
# Generación del gráfico con ggplot2
min_lim = min(rnorm(1000, mean=mu.Ha, sd=denominador)) -
round(min(rnorm(1000, mean=mu.Ha, sd=denominador)))%%10
max_lim = max(rnorm(1000, mean=mu.True, sd=denominador)) +
round(max(rnorm(1000, mean=mu.True, sd=denominador)))%%10
plot <- ggplot(data.frame(x = c(min_lim, max_lim)), aes(x)) +
stat_function(fun = dnorm, args = list(mean = mu.Ha, sd = denominador),
col='red') +
stat_function(fun = dnorm, args = list(mean = mu.True, sd = denominador),
col='blue') +
stat_function(fun = dnorm, args = list(mean = mu.True, sd = denominador),
xlim = c(X_bar,max_lim), geom = "area", fill='red') +
geom_vline(xintercept = X_bar, linetype="dotted", linewidth=1) +
annotate(x=X_bar, y=+Inf,label="alpha", vjust=2, geom="label") +
theme_minimal() +
ggtitle("H0 vs Ha") +
xlab(expression(bar(X))) + ylab("Density")
}else {
# Condición para Two-Sample Z-test (n2 no es nulo)
Z_crit = qnorm(1 - alfa)
# Cálculo de la desviación estándar combinada
denominator = sqrt((sigma1^2 / n1) + (sigma2^2 / n2))
X_bar = Z_crit * denominator + mu.Ha
# Cálculo del Z bajo la hipótesis alternativa
numerator = X_bar - mu.True
Z_alt = numerator / denominator
Power = 1 - pnorm(Z_alt)
# Generación del gráfico para Two-Sample Z-test
min_lim = min(rnorm(1000, mean=mu.Ha, sd=denominator)) - 10
max_lim = max(rnorm(1000, mean=mu.True, sd=denominator)) + 10
plot <- ggplot(data.frame(x = c(min_lim, max_lim)), aes(x)) +
stat_function(fun = dnorm, args = list(mean = mu.Ha, sd = denominator), col='red') +
stat_function(fun = dnorm, args = list(mean = mu.True, sd = denominator), col='blue') +
stat_function(fun = dnorm, args = list(mean = mu.True, sd = denominator),
xlim = c(X_bar, max_lim), geom = "area", fill='red') +
geom_vline(xintercept = X_bar, linetype="dotted", linewidth=1) +
annotate(x=X_bar, y=+Inf, label="alpha", vjust=2, geom="label") +
theme_minimal() +
ggtitle("H0 vs Ha - Two Sample") +
xlab(expression(bar(X))) + ylab("Density")
}
# Retorna una lista con el gráfico y la potencia calculada
return(list(plot=plot, power=Power))
}
# Plot de gráfico de potencia
# Experimentos
# Ejemplo 1: One-sample test, variando la media poblacional y alfa
mu_vals <- seq(90, 110, by=1)
powers <- sapply(mu_vals, function(mu.True) {
result <- power.z.test(n1=16, sigma1=16, mu.Ha=100, mu.True=mu.True, alfa=0.05)
return(result$power)
})
# Gráfico de la potencia vs mu.True
plot(mu_vals, powers, type='l', col='blue', main="Power vs mu.True (alfa = 0.05)",
xlab="Media de la Población", ylab="Potencia")
# Ejemplo 2: Two-sample test, variando la media poblacional y alfa
mu_vals <- seq(90, 110, by=1)
powers <- sapply(mu_vals, function(mu.True) {
result <- power.z.test(n1=16, sigma1=16, n2=16, sigma2=16, mu.Ha=100, mu.True=mu.True, alfa=0.05)
return(result$power)
})
# Gráfico de la potencia vs mu.True
plot(mu_vals, powers, type='l', col='red', main="Power vs mu.True (Two-Sample)",
xlab="Diferencia de Medias de la Población", ylab="Potencia")
df = read.csv('marketing_campaign.csv', sep='\t')
head(df)
# Filtrar ingresos por grado académico
income_graduation <- df$Income[df$Education == 'Graduation']
income_master <- df$Income[df$Education == 'Master']
income_phd <- df$Income[df$Education == 'PhD']
# Remover los valores NA de cada vector
income_graduation <- income_graduation[!is.na(income_graduation)]
income_master <- income_master[!is.na(income_master)]
income_phd <- income_phd[!is.na(income_phd)]
# Implementación de Z-test
z_test <- function(data1, sigma1, mu.Ha=0, data2=NULL, sigma2=NULL, test.type='two-sided') {
n1 <- length(data1)
mean1 <- mean(data1)
if (is.null(data2)) { # One-sample Z-test
z <- (mean1 - mu.Ha) / (sigma1 / sqrt(n1))
if (test.type == 'menor') p <- pnorm(z)
else if (test.type == 'mayor') p <- 1 - pnorm(z)
else p <- 2 * (1 - pnorm(abs(z)))
} else { # Two-sample Z-test
n2 <- length(data2)
mean2 <- mean(data2)
z <- (mean2 - mean1 - mu.Ha) / sqrt((sigma1^2 / n1) + (sigma2^2 / n2))
if (test.type == 'menor') p <- pnorm(z)
else if (test.type == 'mayor') p <- 1 - pnorm(z)
else p <- 2 * (1 - pnorm(abs(z)))
}
return(list(z_score=z, p_value=p))
}
z_test_multiple <- function(data_list, sigma_list, alpha=0.05) {
results <- list()
m <- length(data_list) * (length(data_list) - 1) / 2  # Número de tests
index <- 1
for (i in 1:(length(data_list) - 1)) {
for (j in (i + 1):length(data_list)) {
test_result <- z_test(data_list[[i]], sigma_list[i], data2=data_list[[j]], sigma2=sigma_list[j])
test_result$p_value <- min(test_result$p_value * m, 1) # Corrección de Bonferroni
results[[index]] <- list(data1=i, data2=j, z_score=test_result$z_score, p_value=test_result$p_value)
index <- index + 1
}
}
return(results)
}
# Definir parámetros conocidos
mu_Graduation <- 52000
sigma_Graduation <- 28180
# Realizar el test one-sided (menor y mayor) y two-sided
result_one_sided_menor <- z_test(data1=income_graduation, sigma1=sigma_Graduation, mu.Ha=mu_Graduation, test.type='menor')
result_one_sided_mayor <- z_test(data1=income_graduation, sigma1=sigma_Graduation, mu.Ha=mu_Graduation, test.type='mayor')
result_two_sided <- z_test(data1=income_graduation, sigma1=sigma_Graduation, mu.Ha=mu_Graduation, test.type='two-sided')
# Mostrar resultados
cat("One-sided test (menor): Z-score =", result_one_sided_menor$z_score, ", p-value =", result_one_sided_menor$p_value, "\n")
cat("One-sided test (mayor): Z-score =", result_one_sided_mayor$z_score, ", p-value =", result_one_sided_mayor$p_value, "\n")
cat("Two-sided test: Z-score =", result_two_sided$z_score, ", p-value =", result_two_sided$p_value, "\n")
# Desviaciones estándar de cada grupo
sigma_Graduation <- 28180
sigma_Master <- 20160
sigma_PhD <- 20615
# Realizar múltiples tests usando la función con corrección de Bonferroni
result_multiple_tests <- z_test_multiple(
data_list = list(income_graduation, income_master, income_phd),
sigma_list = c(sigma_Graduation, sigma_Master, sigma_PhD),
alpha = 0.05
)
# Mostrar resultados
for (res in result_multiple_tests) {
cat("Comparación entre grupo", res$data1, "y grupo", res$data2, ": Z-score =", res$z_score, ", p-value ajustado =", res$p_value, "\n")
}
data <- read.csv("ratones.csv",sep= ";", stringsAsFactors = T)
head(data)
### Función probEmpirica sin utilizar el método de Bonferroni correction ###
probEmpirica <- function(alpha,m){
n <- 10000 # Cantidad de veces que se va a repetir el experimento para estimar la probabilidad, pueden cambiar este valor si lo desean
res <- rbinom(n, m, alpha) #Resultados de los experimentos
prob <- mean(res > 0) # Probabilidad empirica
return(prob)
}
#Se comprueba que con un nivel de significancia $\alpha = 0.05$ y $20$ test ya se alcanza una probabilidad de $64\%$ de tener resultados significantes por azar
alpha <- 0.05
m <- 20
prob <- probEmpirica(alpha, m)
print(prob)
#Se calcula teóricamente
prob_teo <- 1 - (1 - alpha)^m
prob_teo
# Parámetros
alpha <- 0.05
m_values <- 10:100 # Valores de m a evaluar
# Inicializamos vectores para almacenar resultados
prob_empirica <- numeric(length(m_values))
prob_teorica <- numeric(length(m_values))
# Calculamos probabilidades empíricas y teóricas para cada valor de m
for (i in seq_along(m_values)) {
m <- m_values[i]
prob_empirica[i] <- probEmpirica(alpha, m)
prob_teorica[i] <- 1 - (1 - alpha)^m
}
# Graficamos resultados
plot(m_values, prob_teorica, type = "l", col = "blue", lwd = 2,
ylab = "Probabilidad de obtener al menos un resultado significativo",
xlab = "Cantidad de experimentos (m)", ylim = c(0, 1))
lines(m_values, prob_empirica, col = "red", lwd = 2)
legend("bottomright", legend = c("Probabilidad Teórica", "Probabilidad Empírica"),
col = c("blue", "red"), lwd = 2)
### Función probEmpirica utilizando el método de Bonferroni correction ###
probEmpiricaBonferroni <- function(alpha,m){
n <- 10000 # Cantidad de veces que se va a repetir el experimento para estimar la probabilidad, pueden cambiar este valor si lo desean
res <- rbinom(n, m, alpha/m) #Resultados de los experimentos
prob <- mean(res > 0)*m # Probabilidad empirica
return(prob)
}
# Parámetros
alpha <- 0.05
m_values <- 1:100 # Valores de m a evaluar
# Inicializamos vectores para almacenar resultados
prob_empirica <- numeric(length(m_values))
prob_teorica <- numeric(length(m_values))
# Calculamos probabilidades empíricas y teóricas para cada valor de m
for (i in seq_along(m_values)) {
m <- m_values[i]
prob_empirica[i] <- probEmpiricaBonferroni(alpha, m)
prob_teorica[i] <- 1 - (1 - alpha)^m
}
# Graficamos resultados
plot(m_values, prob_teorica, type = "l", col = "blue", lwd = 2,
ylab = "Probabilidad de obtener al menos un resultado significativo",
xlab = "Cantidad de experimentos (m)", ylim = c(0, 1))
lines(m_values, prob_empirica, col = "red", lwd = 2)
legend("bottomright", legend = c("Probabilidad Teórica", "Probabilidad Empírica"),
col = c("blue", "red"), lwd = 2)
# Ajustes al dataset
dataset <- read.csv("insurance.csv", header = TRUE)
dataset$sex <- ifelse(dataset$sex == "female", 1, 0)
dataset$smoker <- ifelse(dataset$smoker == "yes", 1, 0)
dataset$region <- NULL
data_fumadores <- dataset[dataset$smoker == "1",]
data_notfumadores <- dataset[dataset$smoker == "0",]
data_fumadores$smoker <- NULL
data_notfumadores$smoker <- NULL
cor(data_fumadores)
cor(data_notfumadores)
# Calculando beta 0 y beta 1 para fumadores y no fumadores
# Función para calcular los betas
calcular_betas<- function(x, y) {
beta_1 <- sum((x - mean(x)) * (y - mean(y))) / sum((x - mean(x))^2)
beta_0 <- mean(y) - beta_1 * mean(x)
list(beta0 = beta_0, beta1 = beta_1)
}
# Para fumadores
beta0_fumadores = calcular_betas(data_fumadores$bmi, data_fumadores$charges)$beta0
beta1_fumadores = calcular_betas(data_fumadores$bmi, data_fumadores$charges)$beta1
# Para no fumadores
beta0_nofumadores = calcular_betas(data_notfumadores$age, data_notfumadores$charges)$beta0
beta1_nofumadores = calcular_betas(data_notfumadores$age, data_notfumadores$charges)$beta1
# Modelos lineales resultantes
# Para fumadores
charges_fumadores <- beta0_fumadores + beta1_fumadores * data_fumadores$bmi
#Para no fumadores
charges_nofumadores <- beta0_nofumadores + beta1_nofumadores * data_notfumadores$age
#Calculo de R2 y R2 ajustado
# Para fumadores
# R2
SST_fumadores <- sum((data_fumadores$charges - mean(data_fumadores$charges))^2)
SSE_fumadores <- sum((data_fumadores$charges - charges_fumadores)^2)
R2_fumadores <- 1 - (SSE_fumadores / SST_fumadores)
R2_fumadores
# R2 ajustado
n_fumadores <- length(data_fumadores$charges)
m <- 1
R2_ajustado_fumadores <- 1 - ((1 - R2_fumadores) * (n_fumadores - 1) / (n_fumadores - m - 1))
R2_ajustado_fumadores
# Para no fumadores
# R2
SST_nofumadores <- sum((data_notfumadores$charges - mean(data_notfumadores$charges))^2)
SSE_nofumadores <- sum((data_notfumadores$charges - charges_nofumadores)^2)
R2_nofumadores <- 1 - (SSE_nofumadores / SST_nofumadores)
R2_nofumadores
# R2 ajustado
n_nofumadores <- length(data_notfumadores$charges)
m <- 1
R2_ajustado_nofumadores <- 1 - ((1 - R2_nofumadores) * (n_nofumadores - 1) / (n_nofumadores - m - 1))
R2_ajustado_nofumadores
# GRáfico para fumadores
plot(data_fumadores$bmi, data_fumadores$charges, main = "Modelo Lineal Simple para Fumadores",
xlab = "bmi", ylab = "Charges", pch = 19)
abline(a = beta0_fumadores, b = beta1_fumadores, col = "blue", lwd = 2)
# GRáfico para no fumadores
plot(data_notfumadores$age, data_notfumadores$charges, main = "Modelo Lineal Simple para No Fumadores",
xlab = "age", ylab = "Charges", pch = 19)
abline(a = beta0_nofumadores, b = beta1_nofumadores, col = "blue", lwd = 2)
# Para fumadores
# Preparar la matriz X y el vector y
X_fumadores <- as.matrix(cbind(1, data_fumadores$bmi, data_fumadores$age))
Y_fumadores <- data_fumadores$charges
# Calcular los coeficientes de beta usando (X'X)^(-1)X'y
beta_fumadores <- solve(t(X_fumadores) %*% X_fumadores) %*% t(X_fumadores) %*% Y_fumadores
beta_fumadores #Valores de la intersección y coeficientes de las variables independientes
# Para no fumadores
# Preparar la matriz X y el vector y
X_nofumadores <- as.matrix(cbind(1, data_notfumadores$bmi, data_notfumadores$children))
Y_nofumadores <- data_notfumadores$charges
# Calcular los coeficientes de beta usando (X'X)^(-1)X'y
beta_nofumadores <- solve(t(X_nofumadores) %*% X_nofumadores) %*% t(X_nofumadores) %*% Y_nofumadores
beta_nofumadores #Valores de la intersección y coeficientes de las variables independientes
reg2 <- lm(charges~bmi+age, data_fumadores)
summary(reg2)
reg3 <- lm(charges~bmi+children, data_notfumadores)
summary(reg3)
