# Función para obtener el desarrollo de las apuestas
ruina <- function(fondos = 100, apuesta = 5){
vec_fondos <- c(fondos)  # Monto inicial
prob_ganar <- 8 / 19    # Probabilidad de ganar
while (0<fondos & fondos<200) {
if (runif(1) < prob_ganar) {  # Generar un número aleatorio para determinar el resultado del juego
fondos <- fondos + apuesta  # Ganó, aumenta los fondos
} else {
fondos <- fondos - apuesta  # Perdió, disminuye los fondos
}
vec_fondos <- c(vec_fondos, fondos)  # Guardar el monto de fondos en el vector
}
return(vec_fondos) # Devuelve un vector con el desarrollo de los fondos
}
plot(ruina(), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 5)")
plot(ruina(apuesta = 25), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 25)")
plot(ruina(apuesta = 50), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 50)")
probabilidad_ruina <- function(apuesta = 5, n_simulaciones = 5000){
exitos <- 0  # Contador de éxitos
for (i in 1:n_simulaciones) {
final_fondos <- ruina(apuesta = apuesta)
if (final_fondos[length(final_fondos)] > 200) {
exitos <- exitos + 1  # Cuenta como éxito si se superan los 200 dólares
}
}
prob_exito <- exitos / n_simulaciones  # Calcular la probabilidad de éxito
return(prob_exito)
}
# Calcular la probabilidad de ruina para diferentes tamaños de apuesta
prob_ruina_5 <- probabilidad_ruina(apuesta = 5)
prob_ruina_25 <- probabilidad_ruina(apuesta = 25)
prob_ruina_50 <- probabilidad_ruina(apuesta = 50)
cat("Probabilidad de ruina con apuesta de 5 dólares:", prob_ruina_5, "\n")
cat("Probabilidad de ruina con apuesta de 25 dólares:", prob_ruina_25, "\n")
cat("Probabilidad de ruina con apuesta de 50 dólares:", prob_ruina_50, "\n")
# Función para obtener el desarrollo de las apuestas
ruina <- function(fondos = 100, apuesta = 5){
vec_fondos <- c(fondos)  # Monto inicial
prob_ganar <- 8 / 19    # Probabilidad de ganar
while (0<fondos & fondos<200) {
if (runif(1) < prob_ganar) {  # Generar un número aleatorio para determinar el resultado del juego
fondos <- fondos + apuesta  # Ganó, aumenta los fondos
} else {
fondos <- fondos - apuesta  # Perdió, disminuye los fondos
}
vec_fondos <- c(vec_fondos, fondos)  # Guardar el monto de fondos en el vector
}
return(vec_fondos) # Devuelve un vector con el desarrollo de los fondos
}
plot(ruina(), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 5)")
plot(ruina(apuesta = 25), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 25)")
plot(ruina(apuesta = 50), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 50)")
# Función para obtener el desarrollo de las apuestas
ruina <- function(fondos = 100, apuesta = 5){
vec_fondos <- c(fondos)  # Monto inicial
prob_ganar <- 8 / 19    # Probabilidad de ganar
while (0<fondos & fondos<200) {
if (runif(1) < prob_ganar) {  # Generar un número aleatorio para determinar el resultado del juego
fondos <- fondos + apuesta  # Ganó, aumenta los fondos
} else {
fondos <- fondos - apuesta  # Perdió, disminuye los fondos
}
vec_fondos <- c(vec_fondos, fondos)  # Guardar el monto de fondos en el vector
}
return(vec_fondos) # Devuelve un vector con el desarrollo de los fondos
}
plot(ruina(), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 5)")
plot(ruina(apuesta = 25), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 25)")
plot(ruina(apuesta = 50), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 50)")
# Función para obtener el desarrollo de las apuestas
ruina <- function(fondos = 100, apuesta = 5){
vec_fondos <- c(fondos)  # Monto inicial
prob_ganar <- 8 / 19    # Probabilidad de ganar
while (0<fondos & fondos<200) {
if (runif(1) < prob_ganar) {  # Generar un número aleatorio para determinar el resultado del juego
fondos <- fondos + apuesta  # Ganó, aumenta los fondos
} else {
fondos <- fondos - apuesta  # Perdió, disminuye los fondos
}
vec_fondos <- c(vec_fondos, fondos)  # Guardar el monto de fondos en el vector
}
return(vec_fondos) # Devuelve un vector con el desarrollo de los fondos
}
plot(ruina(), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 5)")
plot(ruina(apuesta = 25), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 25)")
plot(ruina(apuesta = 50), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 50)")
# Función para obtener el desarrollo de las apuestas
ruina <- function(fondos = 100, apuesta = 5){
vec_fondos <- c(fondos)  # Monto inicial
prob_ganar <- 8 / 19    # Probabilidad de ganar
while (0<fondos & fondos<200) {
if (runif(1) < prob_ganar) {  # Generar un número aleatorio para determinar el resultado del juego
fondos <- fondos + apuesta  # Ganó, aumenta los fondos
} else {
fondos <- fondos - apuesta  # Perdió, disminuye los fondos
}
vec_fondos <- c(vec_fondos, fondos)  # Guardar el monto de fondos en el vector
}
return(vec_fondos) # Devuelve un vector con el desarrollo de los fondos
}
plot(ruina(), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 5)")
plot(ruina(apuesta = 25), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 25)")
plot(ruina(apuesta = 50), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 50)")
probabilidad_ruina <- function(apuesta = 5, n_simulaciones = 5000){
exitos <- 0  # Contador de éxitos
for (i in 1:n_simulaciones) {
final_fondos <- ruina(apuesta = apuesta)
if (final_fondos[length(final_fondos)] > 200) {
exitos <- exitos + 1  # Cuenta como éxito si se superan los 200 dólares
}
}
prob_exito <- exitos / n_simulaciones  # Calcular la probabilidad de éxito
return(prob_exito)
}
# Calcular la probabilidad de ruina para diferentes tamaños de apuesta
prob_ruina_5 <- probabilidad_ruina(apuesta = 5)
prob_ruina_25 <- probabilidad_ruina(apuesta = 25)
prob_ruina_50 <- probabilidad_ruina(apuesta = 50)
cat("Probabilidad de ruina con apuesta de 5 dólares:", prob_ruina_5, "\n")
cat("Probabilidad de ruina con apuesta de 25 dólares:", prob_ruina_25, "\n")
cat("Probabilidad de ruina con apuesta de 50 dólares:", prob_ruina_50, "\n")
probabilidad_ruina <- function(apuesta = 5, n_simulaciones = 5000){
exitos <- 0  # Contador de éxitos
for (i in 1:n_simulaciones) {
final_fondos <- ruina(apuesta = apuesta)
if (final_fondos[length(final_fondos)] > 200) {
exitos <- exitos + 1  # Cuenta como éxito si se superan los 200 dólares
}
}
prob_exito <- exitos / n_simulaciones  # Calcular la probabilidad de éxito
return(prob_exito)
}
# Calcular la probabilidad de ruina para diferentes tamaños de apuesta
prob_ruina_5 <- probabilidad_ruina(apuesta = 5)
prob_ruina_25 <- probabilidad_ruina(apuesta = 25)
prob_ruina_50 <- probabilidad_ruina(apuesta = 50)
cat("Probabilidad de ruina con apuesta de 5 dólares:", prob_ruina_5, "\n")
cat("Probabilidad de ruina con apuesta de 25 dólares:", prob_ruina_25, "\n")
cat("Probabilidad de ruina con apuesta de 50 dólares:", prob_ruina_50, "\n")
probabilidad_ruina <- function(apuesta = 5, n_simulaciones = 5000){
exitos <- 0  # Contador de éxitos
for (i in 1:n_simulaciones) {
final_fondos <- ruina(apuesta = apuesta)
if (final_fondos[length(final_fondos)] > 200) {
exitos <- exitos + 1  # Cuenta como éxito si se superan los 200 dólares
}
}
prob_exito <- exitos / n_simulaciones  # Calcular la probabilidad de éxito
return(prob_exito)
}
# Calcular la probabilidad de ruina para diferentes tamaños de apuesta
prob_ruina_5 <- probabilidad_ruina(apuesta = 5)
prob_ruina_25 <- probabilidad_ruina(apuesta = 25)
prob_ruina_50 <- probabilidad_ruina(apuesta = 50)
cat("Probabilidad de ruina con apuesta de 5 dólares:", prob_ruina_5, "\n")
cat("Probabilidad de ruina con apuesta de 25 dólares:", prob_ruina_25, "\n")
cat("Probabilidad de ruina con apuesta de 50 dólares:", prob_ruina_50, "\n")
probabilidad_ruina <- function(apuesta = 5, n_simulaciones = 5000){
exitos <- 0  # Contador de éxitos
for (i in 1:n_simulaciones) {
final_fondos <- ruina(apuesta = apuesta)
if (final_fondos[length(final_fondos)] > 200) {
exitos <- exitos + 1  # Cuenta como éxito si se superan los 200 dólares
}
}
prob_exito <- exitos / n_simulaciones  # Calcular la probabilidad de éxito
return(prob_exito)
}
# Calcular la probabilidad de ruina para diferentes tamaños de apuesta
prob_ruina_5 <- probabilidad_ruina(apuesta = 5)
prob_ruina_25 <- probabilidad_ruina(apuesta = 25)
prob_ruina_50 <- probabilidad_ruina(apuesta = 50)
cat("Probabilidad de ruina con apuesta de 5 dólares:", prob_ruina_5, "\n")
cat("Probabilidad de ruina con apuesta de 25 dólares:", prob_ruina_25, "\n")
cat("Probabilidad de ruina con apuesta de 50 dólares:", prob_ruina_50, "\n")
