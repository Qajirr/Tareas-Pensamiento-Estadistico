for (i in 1:n_simulaciones) {
final_fondos <- ruina(apuesta = apuesta)
if (final_fondos[length(final_fondos)] > 200) {
exitos <- exitos + 1  # Cuenta como éxito si se superan los 200 dólares
}
}
prob_exito <- exitos / n_simulaciones  # Calcular la probabilidad de éxito
return(prob_exito)
}
# Calcular la probabilidad de ruina para diferentes tamaños de apuesta
prob_ruina_5 <- probabilidad_ruina(apuesta = 5)
prob_ruina_25 <- probabilidad_ruina(apuesta = 25)
prob_ruina_50 <- probabilidad_ruina(apuesta = 50)
cat("Probabilidad de ruina con apuesta de 5 dólares:", prob_ruina_5, "\n")
cat("Probabilidad de ruina con apuesta de 25 dólares:", prob_ruina_25, "\n")
cat("Probabilidad de ruina con apuesta de 50 dólares:", prob_ruina_50, "\n")
probabilidad_ruina <- function(apuesta = 5, n_simulaciones = 5000){
exitos <- 0  # Contador de éxitos
for (i in 1:n_simulaciones) {
final_fondos <- ruina(apuesta = apuesta)
if (final_fondos[length(final_fondos)] > 200) {
exitos <- exitos + 1  # Cuenta como éxito si se superan los 200 dólares
}
}
prob_exito <- exitos / n_simulaciones  # Calcular la probabilidad de éxito
return(prob_exito)
}
# Calcular la probabilidad de ruina para diferentes tamaños de apuesta
prob_ruina_5 <- probabilidad_ruina(apuesta = 5)
prob_ruina_25 <- probabilidad_ruina(apuesta = 25)
prob_ruina_50 <- probabilidad_ruina(apuesta = 50)
cat("Probabilidad de ruina con apuesta de 5 dólares:", prob_ruina_5, "\n")
cat("Probabilidad de ruina con apuesta de 25 dólares:", prob_ruina_25, "\n")
cat("Probabilidad de ruina con apuesta de 50 dólares:", prob_ruina_50, "\n")
probabilidad_ruina <- function(apuesta = 5, n_simulaciones = 5000){
exitos <- 0  # Contador de éxitos
for (i in 1:n_simulaciones) {
final_fondos <- ruina(apuesta = apuesta)
if (final_fondos[length(final_fondos)] > 200) {
exitos <- exitos + 1  # Cuenta como éxito si se superan los 200 dólares
}
}
prob_exito <- exitos / n_simulaciones  # Calcular la probabilidad de éxito
return(prob_exito)
}
# Calcular la probabilidad de ruina para diferentes tamaños de apuesta
prob_ruina_5 <- probabilidad_ruina(apuesta = 5)
prob_ruina_25 <- probabilidad_ruina(apuesta = 25)
prob_ruina_50 <- probabilidad_ruina(apuesta = 50)
cat("Probabilidad de ruina con apuesta de 5 dólares:", prob_ruina_5, "\n")
cat("Probabilidad de ruina con apuesta de 25 dólares:", prob_ruina_25, "\n")
cat("Probabilidad de ruina con apuesta de 50 dólares:", prob_ruina_50, "\n")
probabilidad_ruina <- function(apuesta = 5, n_simulaciones = 5000){
exitos <- 0  # Contador de éxitos
for (i in 1:n_simulaciones) {
final_fondos <- ruina(apuesta = apuesta)
if (final_fondos[length(final_fondos)] > 200) {
exitos <- exitos + 1  # Cuenta como éxito si se superan los 200 dólares
}
}
prob_exito <- exitos / n_simulaciones  # Calcular la probabilidad de éxito
return(prob_exito)
}
# Calcular la probabilidad de ruina para diferentes tamaños de apuesta
prob_ruina_5 <- probabilidad_ruina(apuesta = 5)
prob_ruina_25 <- probabilidad_ruina(apuesta = 25)
prob_ruina_50 <- probabilidad_ruina(apuesta = 50)
cat("Probabilidad de ruina con apuesta de 5 dólares:", prob_ruina_5, "\n")
cat("Probabilidad de ruina con apuesta de 25 dólares:", prob_ruina_25, "\n")
cat("Probabilidad de ruina con apuesta de 50 dólares:", prob_ruina_50, "\n")
probabilidad_ruina <- function(apuesta = 5, n_simulaciones = 5000){
exitos <- 0  # Contador de éxitos
for (i in 1:n_simulaciones) {
final_fondos <- ruina(apuesta = apuesta)
if (final_fondos[length(final_fondos)] > 200) {
exitos <- exitos + 1  # Cuenta como éxito si se superan los 200 dólares
}
}
prob_exito <- exitos / n_simulaciones  # Calcular la probabilidad de éxito
return(prob_exito)
}
# Calcular la probabilidad de ruina para diferentes tamaños de apuesta
prob_ruina_5 <- probabilidad_ruina(apuesta = 5)
prob_ruina_25 <- probabilidad_ruina(apuesta = 25)
prob_ruina_50 <- probabilidad_ruina(apuesta = 50)
cat("Probabilidad de ruina con apuesta de 5 dólares:", prob_ruina_5, "\n")
cat("Probabilidad de ruina con apuesta de 25 dólares:", prob_ruina_25, "\n")
cat("Probabilidad de ruina con apuesta de 50 dólares:", prob_ruina_50, "\n")
probabilidad_ruina <- function(apuesta = 5, n_simulaciones = 5000){
exitos <- 0  # Contador de éxitos
for (i in 1:n_simulaciones) {
final_fondos <- ruina(apuesta = apuesta)
if (final_fondos[length(final_fondos)] > 200) {
exitos <- exitos + 1  # Cuenta como éxito si se superan los 200 dólares
}
}
prob_exito <- exitos / n_simulaciones  # Calcular la probabilidad de éxito
return(prob_exito)
}
# Calcular la probabilidad de ruina para diferentes tamaños de apuesta
prob_ruina_5 <- probabilidad_ruina(apuesta = 5)
prob_ruina_25 <- probabilidad_ruina(apuesta = 25)
prob_ruina_50 <- probabilidad_ruina(apuesta = 50)
cat("Probabilidad de ruina con apuesta de 5 dólares:", prob_ruina_5, "\n")
cat("Probabilidad de ruina con apuesta de 25 dólares:", prob_ruina_25, "\n")
cat("Probabilidad de ruina con apuesta de 50 dólares:", prob_ruina_50, "\n")
# Función para obtener el desarrollo de las apuestas
ruina <- function(fondos = 100, apuesta = 5){
vec_fondos <- c(fondos)  # Monto inicial
prob_ganar <- 8 / 19    # Probabilidad de ganar
while (0<fondos & fondos<=200) {
if (runif(1) < prob_ganar) {  # Generar un número aleatorio para determinar el resultado del juego
fondos <- fondos + apuesta  # Ganó
} else {
fondos <- fondos - apuesta  # Perdió, disminuye los fondos
}
vec_fondos <- c(vec_fondos, fondos)  # Guardar los fondos despues de cada iteracion
}
return(vec_fondos) #
}
plot(ruina(), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 5)")
plot(ruina(apuesta = 25), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 25)")
plot(ruina(apuesta = 50), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 50)")
# Función para obtener el desarrollo de las apuestas
ruina <- function(fondos = 100, apuesta = 5){
vec_fondos <- c(fondos)  # Monto inicial
prob_ganar <- 8 / 19    # Probabilidad de ganar
while (0<fondos & fondos<=200) {
if (runif(1) < prob_ganar) {  # Generar un número aleatorio para determinar el resultado del juego
fondos <- fondos + apuesta  # Ganó
} else {
fondos <- fondos - apuesta  # Perdió, disminuye los fondos
}
vec_fondos <- c(vec_fondos, fondos)  # Guardar los fondos despues de cada iteracion
}
return(vec_fondos) #
}
plot(ruina(), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 5)")
plot(ruina(apuesta = 25), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 25)")
plot(ruina(apuesta = 50), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 50)")
# Función para obtener el desarrollo de las apuestas
ruina <- function(fondos = 100, apuesta = 5){
vec_fondos <- c(fondos)  # Monto inicial
prob_ganar <- 8 / 19    # Probabilidad de ganar
while (0<fondos & fondos<=200) {
if (runif(1) < prob_ganar) {  # Generar un número aleatorio para determinar el resultado del juego
fondos <- fondos + apuesta  # Ganó
} else {
fondos <- fondos - apuesta  # Perdió, disminuye los fondos
}
vec_fondos <- c(vec_fondos, fondos)  # Guardar los fondos despues de cada iteracion
}
return(vec_fondos) #
}
plot(ruina(), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 5)")
plot(ruina(apuesta = 25), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 25)")
plot(ruina(apuesta = 50), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 50)")
# Función para obtener el desarrollo de las apuestas
ruina <- function(fondos = 100, apuesta = 5){
vec_fondos <- c(fondos)  # Monto inicial
prob_ganar <- 8 / 19    # Probabilidad de ganar
while (0<fondos & fondos<=200) {
if (runif(1) < prob_ganar) {  # Generar un número aleatorio para determinar el resultado del juego
fondos <- fondos + apuesta  # Ganó
} else {
fondos <- fondos - apuesta  # Perdió, disminuye los fondos
}
vec_fondos <- c(vec_fondos, fondos)  # Guardar los fondos despues de cada iteracion
}
return(vec_fondos) #
}
plot(ruina(), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 5)")
plot(ruina(apuesta = 25), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 25)")
plot(ruina(apuesta = 50), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 50)")
# Función para obtener el desarrollo de las apuestas
ruina <- function(fondos = 100, apuesta = 5){
vec_fondos <- c(fondos)  # Monto inicial
prob_ganar <- 8 / 19    # Probabilidad de ganar
while (0<fondos & fondos<=200) {
if (runif(1) < prob_ganar) {  # Generar un número aleatorio para determinar el resultado del juego
fondos <- fondos + apuesta  # Ganó
} else {
fondos <- fondos - apuesta  # Perdió, disminuye los fondos
}
vec_fondos <- c(vec_fondos, fondos)  # Guardar los fondos despues de cada iteracion
}
return(vec_fondos) #
}
plot(ruina(), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 5)")
plot(ruina(apuesta = 25), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 25)")
plot(ruina(apuesta = 50), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 50)")
# Función para obtener el desarrollo de las apuestas
ruina <- function(fondos = 100, apuesta = 5){
vec_fondos <- c(fondos)  # Monto inicial
prob_ganar <- 8 / 19    # Probabilidad de ganar
while (0<fondos & fondos<=200) {
if (runif(1) < prob_ganar) {  # Generar un número aleatorio para determinar el resultado del juego
fondos <- fondos + apuesta  # Ganó
} else {
fondos <- fondos - apuesta  # Perdió, disminuye los fondos
}
vec_fondos <- c(vec_fondos, fondos)  # Guardar los fondos despues de cada iteracion
}
return(vec_fondos) #
}
plot(ruina(), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 5)")
plot(ruina(apuesta = 25), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 25)")
plot(ruina(apuesta = 50), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 50)")
# Función para obtener el desarrollo de las apuestas
ruina <- function(fondos = 100, apuesta = 5){
vec_fondos <- c(fondos)  # Monto inicial
prob_ganar <- 8 / 19    # Probabilidad de ganar
while (0<fondos & fondos<=200) {
if (runif(1) < prob_ganar) {  # Generar un número aleatorio para determinar el resultado del juego
fondos <- fondos + apuesta  # Ganó
} else {
fondos <- fondos - apuesta  # Perdió, disminuye los fondos
}
vec_fondos <- c(vec_fondos, fondos)  # Guardar los fondos despues de cada iteracion
}
return(vec_fondos) #
}
plot(ruina(), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 5)")
plot(ruina(apuesta = 25), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 25)")
plot(ruina(apuesta = 50), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 50)")
probabilidad_ruina <- function(apuesta = 5, n_simulaciones = 5000){
exitos <- 0  # Contador de éxitos
for (i in 1:n_simulaciones) {
final_fondos <- ruina(apuesta = apuesta)
if (final_fondos[length(final_fondos)] > 200) {
exitos <- exitos + 1  # Exito si se superan los 200 dólares
}
}
prob_exito <- exitos / n_simulaciones  # Calcular la probabilidad de éxito
return(prob_exito)
}
# Calcular la probabilidad de ruina para diferentes tamaños de apuesta
prob_ruina_5 <- probabilidad_ruina(apuesta = 5)
prob_ruina_25 <- probabilidad_ruina(apuesta = 25)
prob_ruina_50 <- probabilidad_ruina(apuesta = 50)
cat("Probabilidad de ruina con apuesta de 5 dólares:", prob_ruina_5, "\n")
cat("Probabilidad de ruina con apuesta de 25 dólares:", prob_ruina_25, "\n")
cat("Probabilidad de ruina con apuesta de 50 dólares:", prob_ruina_50, "\n")
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
# Crear un data frame con los datos
df <- data.frame(
Apuesta = c(5, 25, 50),
Probabilidad_de_Ruina = c(prob_ruina_5, prob_ruina_25, prob_ruina_50)
)
# Graficar las probabilidades de ruina
ggplot(df, aes(x = factor(Apuesta), y = Probabilidad_de_Ruina)) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_text(aes(label = round(Probabilidad_de_Ruina, 2)),
vjust = -0.5, size = 4) +
theme_minimal() +
labs(title = "Probabilidad de Ruina según Tamaño de la Apuesta",
x = "Tamaño de la Apuesta ($)",
y = "Probabilidad de Ruina") +
ylim(0, 1)
library(ggplot2)
# Crear un data frame con los datos
df <- data.frame(
Apuesta = c(5, 25, 50),
Probabilidad_de_Ruina = c(prob_ruina_5, prob_ruina_25, prob_ruina_50)
)
# Graficar las probabilidades de ruina
ggplot(df, aes(x = factor(Apuesta), y = Probabilidad_de_Ruina)) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_text(aes(label = round(Probabilidad_de_Ruina, 2)),
vjust = -0.5, size = 4) +
theme_minimal() +
labs(title = "Probabilidad de Ruina según Tamaño de la Apuesta",
x = "Tamaño de la Apuesta ($)",
y = "Probabilidad de Ruina") +
ylim(0, 1)
library(ggplot2)
# Crear un data frame con los datos
df <- data.frame(
Apuesta = c(5, 25, 50),
Probabilidad_de_Ruina = c(prob_ruina_5, prob_ruina_25, prob_ruina_50)
)
# Graficar las probabilidades de ruina
ggplot(df, aes(x = factor(Apuesta), y = Probabilidad_de_Ruina)) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_text(aes(label = round(Probabilidad_de_Ruina, 2)),
vjust = -0.5, size = 4) +
theme_minimal() +
labs(title = "Probabilidad de Ruina según Tamaño de la Apuesta",
x = "Tamaño de la Apuesta ($)",
y = "Probabilidad de Ruina") +
ylim(0, 1)
library(ggplot2)
# Primer grupo de eventos
N_lan = 1000 # Numero de lanzamientos
L_A = c(1, 2, 6) # Lanzamientos favorables A = c(1, 2, 6)
L_B = c(1, 2, 3, 4) # Lanzamientos favorables B = c(1, 2, 3, 4)
L_AB = c(1, 2) # Lanzamientos favorables AB = c(1, 2)
# Simular lanzamientos
D1 <- sample(1:6, N_lan, replace = TRUE)
D2 <- sample(1:6, N_lan, replace = TRUE)
# Calcular probabilidades
P_A <- mean(D1 %in% L_A)
P_B <- mean(D2 %in% L_B)
P_AB <- mean(D1 %in% L_AB & D2 %in% L_AB)
# Comparación
cat("Primer grupo de eventos:\n")
cat("P(A) = ", P_A, "\n")
cat("P(B) = ", P_B, "\n")
cat("P(AB) = ", P_AB, "\n")
cat("P(A)*P(B) = ", P_A * P_B, "\n\n")
# Datos para el gráfico
df1 <- data.frame(
Event = c("P(A)", "P(B)", "P(A) * P(B)", "P(AB)"),
Probability = c(P_A, P_B, P_A_times_P_B, P_AB)
)
library(ggplot2)
# Primer grupo de eventos
N_lan = 1000 # Numero de lanzamientos
L_A = c(1, 2, 6) # Lanzamientos favorables A = c(1, 2, 6)
L_B = c(1, 2, 3, 4) # Lanzamientos favorables B = c(1, 2, 3, 4)
L_AB = c(1, 2) # Lanzamientos favorables AB = c(1, 2)
# Simular lanzamientos
D1 <- sample(1:6, N_lan, replace = TRUE)
D2 <- sample(1:6, N_lan, replace = TRUE)
# Calcular probabilidades
P_A <- mean(D1 %in% L_A)
P_B <- mean(D2 %in% L_B)
P_AB <- mean(D1 %in% L_AB & D2 %in% L_AB)
P_A_times_P_B <- P_A * P_B
# Comparación
cat("Primer grupo de eventos:\n")
cat("P(A) = ", P_A, "\n")
cat("P(B) = ", P_B, "\n")
cat("P(AB) = ", P_AB, "\n")
cat("P(A)*P(B) = ", P_A * P_B, "\n\n")
# Datos para el gráfico
df1 <- data.frame(
Event = c("P(A)", "P(B)", "P(A) * P(B)", "P(AB)"),
Probability = c(P_A, P_B, P_A_times_P_B, P_AB)
)
# Gráfico para el primer grupo
ggplot(df1, aes(x = Event, y = Probability, fill = Event)) +
geom_bar(stat = "identity", position = "dodge") +
ggtitle("Primer Grupo de Eventos: Comparación de Probabilidades") +
theme_dark()
n_lan <- 1000000
# Primer experimento
dice1 <- sample(1:6, n_lan, replace = TRUE)  # Dado 1
dice2 <- sample(1:6, n_lan, replace = TRUE)  # Dado 2
favorable_a <- c(1, 2, 6)  # {1, 2, 6}
favorable_b <- c(1, 2, 3, 4)  # {1, 2, 3, 4}
favorable_ayb <- c(1, 2)  # {1, 2}
prob_axb <- vector(length = n_lan)
prob_ayb <- vector(length = n_lan)
cum_a <- 0  # |A|
cum_b <- 0  # |B|
cum_ayb <- 0  # |A∩B|
# Conteo de casos
for (i in 1:n_lan) {
a <- FALSE
b <- FALSE
if (dice1[i] %in% favorable_a) {
cum_a <- cum_a + 1
a <- TRUE
}
if (dice2[i] %in% favorable_b) {
cum_b <- cum_b + 1
b <- TRUE
}
cum_ayb <- if (a && b) (cum_ayb + 1) else cum_ayb
prob_axb[i] <- (cum_a / i) * (cum_b / i)
prob_ayb[i] <- cum_ayb / i
}
# Gráfico del experimento
plot(1, ann = FALSE, type = "n", xlim = c(0, n_lan+1), ylim = c(0, 1))
lines(seq(1, n_lan), prob_axb, col = "blue")
lines(seq(1, n_lan), prob_ayb, col = "red")
legend(8e+05, 1, legend = c("P(A)*P(B)", "P(A∩B)"), fill = c("blue", "red"))
n_lan <- 1000
# Primer experimento
dice1 <- sample(1:6, n_lan, replace = TRUE)  # Dado 1
dice2 <- sample(1:6, n_lan, replace = TRUE)  # Dado 2
favorable_a <- c(1, 2, 6)  # {1, 2, 6}
favorable_b <- c(1, 2, 3, 4)  # {1, 2, 3, 4}
favorable_ayb <- c(1, 2)  # {1, 2}
prob_axb <- vector(length = n_lan)
prob_ayb <- vector(length = n_lan)
cum_a <- 0  # |A|
cum_b <- 0  # |B|
cum_ayb <- 0  # |A∩B|
# Conteo de casos
for (i in 1:n_lan) {
a <- FALSE
b <- FALSE
if (dice1[i] %in% favorable_a) {
cum_a <- cum_a + 1
a <- TRUE
}
if (dice2[i] %in% favorable_b) {
cum_b <- cum_b + 1
b <- TRUE
}
cum_ayb <- if (a && b) (cum_ayb + 1) else cum_ayb
prob_axb[i] <- (cum_a / i) * (cum_b / i)
prob_ayb[i] <- cum_ayb / i
}
# Gráfico del experimento
plot(1, ann = FALSE, type = "n", xlim = c(0, n_lan+1), ylim = c(0, 1))
lines(seq(1, n_lan), prob_axb, col = "blue")
lines(seq(1, n_lan), prob_ayb, col = "red")
legend(8e+05, 1, legend = c("P(A)*P(B)", "P(A∩B)"), fill = c("blue", "red"))
n_lan <- 1000
# Primer experimento
dice1 <- sample(1:6, n_lan, replace = TRUE)  # Dado 1
dice2 <- sample(1:6, n_lan, replace = TRUE)  # Dado 2
favorable_a <- c(1, 2, 6)  # {1, 2, 6}
favorable_b <- c(1, 2, 3, 4)  # {1, 2, 3, 4}
favorable_ayb <- c(1, 2)  # {1, 2}
prob_axb <- vector(length = n_lan)
prob_ayb <- vector(length = n_lan)
cum_a <- 0  # |A|
cum_b <- 0  # |B|
cum_ayb <- 0  # |A∩B|
# Conteo de casos
for (i in 1:n_lan) {
a <- FALSE
b <- FALSE
if (dice1[i] %in% favorable_a) {
cum_a <- cum_a + 1
a <- TRUE
}
if (dice2[i] %in% favorable_b) {
cum_b <- cum_b + 1
b <- TRUE
}
cum_ayb <- if (a && b) (cum_ayb + 1) else cum_ayb
prob_axb[i] <- (cum_a / i) * (cum_b / i)
prob_ayb[i] <- cum_ayb / i
}
# Gráfico del experimento
plot(1, ann = FALSE, type = "n", xlim = c(0, n_lan+1), ylim = c(0, 1))
lines(seq(1, n_lan), prob_axb, col = "blue")
lines(seq(1, n_lan), prob_ayb, col = "red")
legend(8e+05, 1, legend = c("P(A)*P(B)", "P(A∩B)"), fill = c("blue", "red"))
n_lan <- 100
# Primer experimento
dice1 <- sample(1:6, n_lan, replace = TRUE)  # Dado 1
dice2 <- sample(1:6, n_lan, replace = TRUE)  # Dado 2
favorable_a <- c(1, 2, 6)  # {1, 2, 6}
favorable_b <- c(1, 2, 3, 4)  # {1, 2, 3, 4}
favorable_ayb <- c(1, 2)  # {1, 2}
prob_axb <- vector(length = n_lan)
prob_ayb <- vector(length = n_lan)
cum_a <- 0  # |A|
cum_b <- 0  # |B|
cum_ayb <- 0  # |A∩B|
# Conteo de casos
for (i in 1:n_lan) {
a <- FALSE
b <- FALSE
if (dice1[i] %in% favorable_a) {
cum_a <- cum_a + 1
a <- TRUE
}
if (dice2[i] %in% favorable_b) {
cum_b <- cum_b + 1
b <- TRUE
}
cum_ayb <- if (a && b) (cum_ayb + 1) else cum_ayb
prob_axb[i] <- (cum_a / i) * (cum_b / i)
prob_ayb[i] <- cum_ayb / i
}
# Gráfico del experimento
plot(1, ann = FALSE, type = "n", xlim = c(0, n_lan+1), ylim = c(0, 1))
lines(seq(1, n_lan), prob_axb, col = "blue")
lines(seq(1, n_lan), prob_ayb, col = "red")
legend(8e+05, 1, legend = c("P(A)*P(B)", "P(A∩B)"), fill = c("blue", "red"))
n_lan <- 10000000
# Primer experimento
dice1 <- sample(1:6, n_lan, replace = TRUE)  # Dado 1
dice2 <- sample(1:6, n_lan, replace = TRUE)  # Dado 2
favorable_a <- c(1, 2, 6)  # {1, 2, 6}
favorable_b <- c(1, 2, 3, 4)  # {1, 2, 3, 4}
favorable_ayb <- c(1, 2)  # {1, 2}
prob_axb <- vector(length = n_lan)
prob_ayb <- vector(length = n_lan)
cum_a <- 0  # |A|
cum_b <- 0  # |B|
cum_ayb <- 0  # |A∩B|
# Conteo de casos
for (i in 1:n_lan) {
a <- FALSE
b <- FALSE
if (dice1[i] %in% favorable_a) {
cum_a <- cum_a + 1
a <- TRUE
}
if (dice2[i] %in% favorable_b) {
cum_b <- cum_b + 1
b <- TRUE
}
cum_ayb <- if (a && b) (cum_ayb + 1) else cum_ayb
prob_axb[i] <- (cum_a / i) * (cum_b / i)
prob_ayb[i] <- cum_ayb / i
}
# Gráfico del experimento
plot(1, ann = FALSE, type = "n", xlim = c(0, n_lan+1), ylim = c(0, 1))
lines(seq(1, n_lan), prob_axb, col = "blue")
lines(seq(1, n_lan), prob_ayb, col = "red")
legend(8e+05, 1, legend = c("P(A)*P(B)", "P(A∩B)"), fill = c("blue", "red"))
