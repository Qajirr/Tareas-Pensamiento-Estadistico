#convergencia
plot(convergencia,type = "l", xlab = "Número de intentos", ylab = "Probabilidad de salir cara")
abline(h = 5/8, col = "red", lty = 2)
# Creamos una función que simule el juego
montyhall <- function(cambiar = TRUE) {
Puertas <- sample(1:3, 3) #Puertas donde la posición que tiene el 3 es el premio
cat("Puertas:", Puertas, "; ")
posicion <- sample(1:3, 1)  # Elección del participante
cat("Posición elegida:", posicion, "; ")
# Identificar puertas descartables que no tienen el premio y que no sean la elegida por el participante
puertas_descartables <- which(Puertas != 3 & 1:3 != posicion)
cat("Puertas descartables:", puertas_descartables, "; ")
# Escoger una puerta para descartar
puerta_descartada <- puertas_descartables[sample(length(puertas_descartables), 1)]
cat("Puerta descartada:", puerta_descartada, "; ")
# Si el participante decide cambiar su elección
if (cambiar) {
nuevas_opciones <- setdiff(1:3, c(posicion, puerta_descartada)) #se elige la otra puerta que queda disponible
posicion <- nuevas_opciones
}
cat("Nueva elección:", posicion, "; ")
# Verificar si la elección final tiene el premio
Eleccion <- ifelse(Puertas[posicion] == 3, "Ganaste", "Perdiste")
cat("Eleccion", Eleccion)
return(Eleccion) #Retornamos la elección viendo si perdió o ganó
}
# Ejemplo de uso:
cat(montyhall(TRUE))
# Función que simula N juegos
n_juegos <- function(n = 10 ,cambiar_puerta = TRUE){
convergencia <- numeric(n)
for (juego in 1:n) {
cat("Juego",juego , ":")
resultado <- montyhall(cambiar_puerta)
# Convertir el resultado a numérico: 1 para "Ganaste", 0 para "Perdiste"
convergencia[juego] <- ifelse(resultado == "Ganaste", 1, 0)
}
return(convergencia)
}
# Ejecutar la simulación de 40 juegos cambiando de puerta
resultados_cambiar <- n_juegos(40, TRUE)
# Ejecutar la simulación de 40 juegos sin cambiar de puerta
resultados_no_cambiar <- n_juegos(40, FALSE)
# Graficar la convergencia para cambiar de puerta
plot(cumsum(resultados_cambiar) / 1:40, type = "l", col = "blue", xlab = "Número de juegos", ylab = "Proporción de éxitos", main = "Convergencia de Monty Hall", ylim = c(0, 1))
# Graficar la convergencia para no cambiar de puerta en el mismo gráfico
lines(cumsum(resultados_no_cambiar) / 1:40, col = "red")
# Añadir una leyenda para diferenciar las dos curvas
legend("bottomright", legend = c("Cambiar de puerta", "No cambiar de puerta"), col = c("blue", "red"), lty = 1)
library(ggplot2)
# Primer grupo de eventos
N_lan = 1000 # Numero de lanzamientos
L_A = c(1, 2, 6) # Lanzamientos favorables A = c(1, 2, 6)
L_B = c(1, 2, 3, 4) # Lanzamientos favorables B = c(1, 2, 3, 4)
L_AB = c(1, 2) # Lanzamientos favorables AB = c(1, 2)
# Simular lanzamientos
D1 <- sample(1:6, N_lan, replace = TRUE)
D2 <- sample(1:6, N_lan, replace = TRUE)
A <- 0
B <- 0
AB <- 0
P_A_x_P_B <- numeric(N_lan)
P_AB <- numeric(N_lan)
# Conteo de casos
for (i in 1:N_lan) {
a <- FALSE
b <- FALSE
if (D1[i] %in% L_A) {
A <- A + 1
a <- TRUE
}
if (D2[i] %in% L_B) {
B <- B + 1
b <- TRUE
}
if (a && b) {
AB <- AB + 1
}
# Calcular las probabilidades acumuladas
P_A_x_P_B[i] <- (A / i) * (B / i)
P_AB[i] <- AB / i
}
# Gráfico del experimento
plot(1:N_lan, P_A_x_P_B, type = "l", col = "blue", ylim = c(0, 1), xlab = "Número de lanzamientos", ylab = "Probabilidad")
lines(1:N_lan, P_AB, col = "red")
legend("topright", legend = c("P(A)*P(B)", "P(A∩B)"), col = c("blue", "red"), lty = 1)
# Segundo grupo de eventos
N_lan = 1000 # Numero de lanzamientos
L_A = c(1, 2, 6)  # Lanzamientos favorables A = c(1, 2, 6)
L_B = c(1, 2, 3)   # Lanzamientos favorables B = c(1, 2, 3)
L_AB = c(1, 2) # Lanzamientos favorables AB = c(1, 2)
# Simular lanzamientos
D1 <- sample(1:6, N_lan, replace = TRUE)
A <- 0
B <- 0
AB <- 0
P_A_x_P_B <- numeric(N_lan)
P_AB <- numeric(N_lan)
# Conteo de casos
for (i in 1:N_lan) {
a <- FALSE
b <- FALSE
if (D1[i] %in% L_A) {
A <- A + 1
a <- TRUE
}
if (D1[i] %in% L_B) {  # D1 para B
B <- B + 1
b <- TRUE
}
if (a && b) {
AB <- AB + 1
}
# Calcular las probabilidades acumuladas
P_A_x_P_B[i] <- (A / i) * (B / i)
P_AB[i] <- AB / i
}
plot(1:N_lan, P_A_x_P_B, type = "l", col = "blue", ylim = c(0, 1), xlab = "Número de lanzamientos", ylab = "Probabilidad", main = "Independencia - Un Dado")
lines(1:N_lan, P_AB, col = "red")
legend("topright", legend = c("P(A)*P(B)", "P(A∩B)"), col = c("blue", "red"), lty = 1)
# Función para obtener el desarrollo de las apuestas
ruina <- function(fondos = 100, apuesta = 5){
vec_fondos <- c(fondos)  # Monto inicial
prob_ganar <- 8 / 19    # Probabilidad de ganar
while (0<fondos & fondos<=200) {
if (runif(1) < prob_ganar) {  # Generar un número aleatorio para determinar el resultado del juego
fondos <- fondos + apuesta  # Ganó
} else {
fondos <- fondos - apuesta  # Perdió, disminuye los fondos
}
vec_fondos <- c(vec_fondos, fondos)  # Guardar los fondos despues de cada iteracion
}
return(vec_fondos) # Devuelve un vector con el desarrollo de los fondos
}
plot(ruina(), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 5)")
plot(ruina(apuesta = 25), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 25)")
plot(ruina(apuesta = 50), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 50)")
ruina <- function(fondos = 100, apuesta = 5){
vec_fondos <- c(fondos)  # Monto inicial
prob_ganar <- 8 / 19    # Probabilidad de ganar
while (0<fondos & fondos<=200) {
if (runif(1) < prob_ganar) {  # Generar un número aleatorio para determinar el resultado del juego
fondos <- fondos + apuesta  # Ganó
} else {
fondos <- fondos - apuesta  # Perdió, disminuye los fondos
}
vec_fondos <- c(vec_fondos, fondos)  # Guardar los fondos despues de cada iteracion
}
return(vec_fondos) # Devuelve un vector con el desarrollo de los fondos
}
probabilidad_ruina <- function(apuesta = 5, n_simulaciones = 5000){
exitos <- 0  # Contador de éxitos
for (i in 1:n_simulaciones) {
final_fondos <- ruina(apuesta = apuesta)
if (final_fondos[length(final_fondos)] > 200) {
exitos <- exitos + 1  # Exito si se superan los 200 dólares
}
}
prob_exito <- exitos / n_simulaciones  # Calcular la probabilidad de éxito
return(prob_exito)
}
# Calcular la probabilidad de ruina para diferentes tamaños de apuesta
prob_ruina_5 <- probabilidad_ruina(apuesta = 5)
prob_ruina_25 <- probabilidad_ruina(apuesta = 25)
prob_ruina_50 <- probabilidad_ruina(apuesta = 50)
cat("Probabilidad de ruina con apuesta de 5 dólares:", prob_ruina_5, "\n")
cat("Probabilidad de ruina con apuesta de 25 dólares:", prob_ruina_25, "\n")
cat("Probabilidad de ruina con apuesta de 50 dólares:", prob_ruina_50, "\n")
data <- read.csv("hearth_database.csv")
#summary(data
for (i in 7:14) {
cat(colnames(data)[i],"\n")
cat("Promedio: ", mean(data[,i]), "\n")
cat("Mediana: ",median(data[,i]), "\n" )
cat("Cuantiles: ", quantile(data[,i]), "\n")
cat("Máximo: ", max(data[,i]), "\n")
cat("\n")
}
cor(data[,7:14])
boxplot(x=data[,7:14],main="Boxplot data")
data <- read.csv("hearth_database.csv")
data$target <- as.numeric(data$target == "YES")
hist(data[,7][data$target == 1],nclass=10, main = "slope")
hist(data[,7][data$target == 0],nclass=10, main = "slope")
hist(data[,8][data$target == 1],nclass=10, main = "ca")
hist(data[,8][data$target == 0],nclass=10, main = "ca")
hist(data[,9][data$target == 1],nclass=10, main = "thal")
hist(data[,9][data$target == 0],nclass=10, main = "thal")
hist(data[,10][data$target == 1],nclass=10, main = "age")
hist(data[,10][data$target == 0],nclass=10, main = "age")
hist(data[,11][data$target == 1],nclass=10, main = "trestbps")
hist(data[,11][data$target == 0],nclass=10, main = "trestbps")
hist(data[,12][data$target == 1],nclass=10, main = "chol")
hist(data[,12][data$target == 0],nclass=10, main = "chol")
hist(data[,13][data$target == 1],nclass=10, main = "thalach")
hist(data[,13][data$target == 0],nclass=10, main = "thalach")
hist(data[,14][data$target == 1],nclass=10, main = "oldpeak")
hist(data[,14][data$target == 0],nclass=10, main = "oldpeak")
# Definición de variables o estructuras necesarias para el muestreo.
n <- 1000
tamaño <- 10
# Normal
sigma <- sqrt(5)
mu <-5
# Gamma
alfa <- 2
beta <- 1.5
# Poisson
lambda <- 5
#se inicializan vectores donde seran guardados los promedios
normal_promedio <- numeric(n)
gamma_promedio <-numeric(n)
poss_promedio <-numeric(n)
# Realizar el muestreo de las distribuciones.
for(i in 1:n) {
normal <- rnorm(tamaño,mean = 5,sd =sigma/sqrt(n))
normal_promedio[i] <- mean(normal)
gamma <- rgamma(tamaño,alfa,rate=beta)
gamma_promedio[i] <- mean(gamma)
poss <- rpois(tamaño,lambda)
poss_promedio[i] <- mean(poss)
}
# Código para gráficos
graficar_histograma <- function(medias_muestrales, titulo) {
hist(medias_muestrales, probability = TRUE, main = titulo, xlab = "Media muestral")
curve(dnorm(x, mean = mean(medias_muestrales), sd = sd(medias_muestrales)), col = "red", lwd = 2, add = TRUE)
}
graficar_histograma(normal,'Normal 1')
graficar_histograma(normal_promedio,'Normal con Promedio')
graficar_histograma(gamma,'Gamma 2')
graficar_histograma(gamma_promedio,'Gamma con Promedio')
graficar_histograma(poss,'Poisson 3')
graficar_histograma(poss_promedio,'Poisson con Promedio')
# Definición de variables o estructuras necesarias para el muestreo.
n <- 1000
tamaño <- 100
# Normal
sigma <- sqrt(5)
mu <-5
# Gamma
alfa <- 2
beta <- 1.5
# Poisson
lambda <- 5
normal_promedio <- numeric(n)
gamma_promedio <-numeric(n)
poss_promedio <-numeric(n)
# Realizar el muestreo de las distribuciones.
for(i in 1:n) {
normal <- rnorm(tamaño,mean = 5,sd =sigma/sqrt(n))
normal_promedio[i] <- mean(normal)
gamma <- rgamma(tamaño,alfa,rate=beta)
gamma_promedio[i] <- mean(gamma)
poss <- rpois(tamaño,lambda)
poss_promedio[i] <- mean(poss)
}
# Código para gráficos
graficar_histograma <- function(medias_muestrales, titulo) {
hist(medias_muestrales, probability = TRUE, main = titulo, xlab = "Media muestral")
curve(dnorm(x, mean = mean(medias_muestrales), sd = sd(medias_muestrales)), col = "red", lwd = 2, add = TRUE)
}
#Graficamos
graficar_histograma(normal,'Normal 1')
graficar_histograma(normal_promedio,'Normal con Promedio')
graficar_histograma(gamma,'Gamma 2')
graficar_histograma(gamma_promedio,'Gamma con Promedio')
graficar_histograma(poss,'Poisson 3')
graficar_histograma(poss_promedio,'Poisson con Promedio')
# Definición de variables o estructuras necesarias para el muestreo.
n <- 1000
tamaño <- 1000
# Normal
sigma <- sqrt(5)
mu <-5
# Gamma
alfa <- 2
beta <- 1.5
# Poisson
lambda <- 5
normal_promedio <- numeric(n)
gamma_promedio <-numeric(n)
poss_promedio <-numeric(n)
# Realizar el muestreo de las distribuciones.
for(i in 1:n) {
normal <- rnorm(tamaño,mean = 5,sd =sigma/sqrt(n))
normal_promedio[i] <- mean(normal)
gamma <- rgamma(tamaño,alfa,rate=beta)
gamma_promedio[i] <- mean(gamma)
poss <- rpois(tamaño,lambda)
poss_promedio[i] <- mean(poss)
}
# Código para gráficos
graficar_histograma <- function(medias_muestrales, titulo) {
hist(medias_muestrales, probability = TRUE, main = titulo, xlab = "Media muestral")
curve(dnorm(x, mean = mean(medias_muestrales), sd = sd(medias_muestrales)), col = "red", lwd = 2, add = TRUE)
}
#Graficamos
graficar_histograma(normal,'Normal 1')
graficar_histograma(normal_promedio,'Normal con Promedio')
graficar_histograma(gamma,'Gamma 2')
graficar_histograma(gamma_promedio,'Gamma con Promedio')
graficar_histograma(poss,'Poisson 3')
graficar_histograma(poss_promedio,'Poisson con Promedio')
# Definición de variables o estructuras necesarias para el muestreo.
n <- 1000
tamaño <- 5000
# Normal
sigma <- sqrt(5)
mu <-5
# Gamma
alfa <- 2
beta <- 1.5
# Poisson
lambda <- 5
normal_promedio <- numeric(n)
gamma_promedio <-numeric(n)
poss_promedio <-numeric(n)
# Realizar el muestreo de las distribuciones.
for(i in 1:n) {
normal <- rnorm(tamaño,mean = 5,sd =sigma/sqrt(n))
normal_promedio[i] <- mean(normal)
gamma <- rgamma(tamaño,alfa,rate=beta)
gamma_promedio[i] <- mean(gamma)
poss <- rpois(tamaño,lambda)
poss_promedio[i] <- mean(poss)
}
# Código para gráficos
graficar_histograma <- function(medias_muestrales, titulo) {
hist(medias_muestrales, probability = TRUE, main = titulo, xlab = "Media muestral")
curve(dnorm(x, mean = mean(medias_muestrales), sd = sd(medias_muestrales)), col = "red", lwd = 2, add = TRUE)
}
#Graficamos
graficar_histograma(normal,'Normal 1')
graficar_histograma(normal_promedio,'Normal con Promedio')
graficar_histograma(gamma,'Gamma 2')
graficar_histograma(gamma_promedio,'Gamma con Promedio')
graficar_histograma(poss,'Poisson 3')
graficar_histograma(poss_promedio,'Poisson con Promedio')
convergencia <- 1:1000
# Simular lanzamientos
for (lanzamientos in 1:1000) {
convergencia[lanzamientos] = rbinom(n = 1,size=lanzamientos,p=5/8)/lanzamientos
}
# Gráfico de la convergencia
#convergencia
plot(convergencia,type = "l", xlab = "Número de intentos", ylab = "Probabilidad de salir cara")
abline(h = 5/8, col = "red", lty = 2)
# Creamos una función que simule el juego
montyhall <- function(cambiar = TRUE) {
Puertas <- sample(1:3, 3) #Puertas donde la posición que tiene el 3 es el premio
cat("Puertas:", Puertas, "; ")
posicion <- sample(1:3, 1)  # Elección del participante
cat("Posición elegida:", posicion, "; ")
# Identificar puertas descartables que no tienen el premio y que no sean la elegida por el participante
puertas_descartables <- which(Puertas != 3 & 1:3 != posicion)
cat("Puertas descartables:", puertas_descartables, "; ")
# Escoger una puerta para descartar
puerta_descartada <- puertas_descartables[sample(length(puertas_descartables), 1)]
cat("Puerta descartada:", puerta_descartada, "; ")
# Si el participante decide cambiar su elección
if (cambiar) {
nuevas_opciones <- setdiff(1:3, c(posicion, puerta_descartada)) #se elige la otra puerta que queda disponible
posicion <- nuevas_opciones
}
cat("Nueva elección:", posicion, "; ")
# Verificar si la elección final tiene el premio
Eleccion <- ifelse(Puertas[posicion] == 3, "Ganaste", "Perdiste")
cat("Eleccion", Eleccion)
return(Eleccion) #Retornamos la elección viendo si perdió o ganó
}
# Ejemplo de uso:
cat(montyhall(TRUE))
# Función que simula N juegos
n_juegos <- function(n = 10 ,cambiar_puerta = TRUE){
convergencia <- numeric(n)
for (juego in 1:n) {
cat("Juego",juego , ":")
resultado <- montyhall(cambiar_puerta)
# Convertir el resultado a numérico: 1 para "Ganaste", 0 para "Perdiste"
convergencia[juego] <- ifelse(resultado == "Ganaste", 1, 0)
}
return(convergencia)
}
# Ejecutar la simulación de 40 juegos cambiando de puerta
resultados_cambiar <- n_juegos(40, TRUE)
# Ejecutar la simulación de 40 juegos sin cambiar de puerta
resultados_no_cambiar <- n_juegos(40, FALSE)
# Graficar la convergencia para cambiar de puerta
plot(cumsum(resultados_cambiar) / 1:40, type = "l", col = "blue", xlab = "Número de juegos", ylab = "Proporción de éxitos", main = "Convergencia de Monty Hall", ylim = c(0, 1))
# Graficar la convergencia para no cambiar de puerta en el mismo gráfico
lines(cumsum(resultados_no_cambiar) / 1:40, col = "red")
# Añadir una leyenda para diferenciar las dos curvas
legend("bottomright", legend = c("Cambiar de puerta", "No cambiar de puerta"), col = c("blue", "red"), lty = 1)
library(ggplot2)
# Primer grupo de eventos
N_lan = 1000 # Numero de lanzamientos
L_A = c(1, 2, 6) # Lanzamientos favorables A = c(1, 2, 6)
L_B = c(1, 2, 3, 4) # Lanzamientos favorables B = c(1, 2, 3, 4)
L_AB = c(1, 2) # Lanzamientos favorables AB = c(1, 2)
# Simular lanzamientos
D1 <- sample(1:6, N_lan, replace = TRUE)
D2 <- sample(1:6, N_lan, replace = TRUE)
A <- 0
B <- 0
AB <- 0
P_A_x_P_B <- numeric(N_lan)
P_AB <- numeric(N_lan)
# Conteo de casos
for (i in 1:N_lan) {
a <- FALSE
b <- FALSE
if (D1[i] %in% L_A) {
A <- A + 1
a <- TRUE
}
if (D2[i] %in% L_B) {
B <- B + 1
b <- TRUE
}
if (a && b) {
AB <- AB + 1
}
# Calcular las probabilidades acumuladas
P_A_x_P_B[i] <- (A / i) * (B / i)
P_AB[i] <- AB / i
}
# Gráfico del experimento
plot(1:N_lan, P_A_x_P_B, type = "l", col = "blue", ylim = c(0, 1), xlab = "Número de lanzamientos", ylab = "Probabilidad")
lines(1:N_lan, P_AB, col = "red")
legend("topright", legend = c("P(A)*P(B)", "P(A∩B)"), col = c("blue", "red"), lty = 1)
# Segundo grupo de eventos
N_lan = 1000 # Numero de lanzamientos
L_A = c(1, 2, 6)  # Lanzamientos favorables A = c(1, 2, 6)
L_B = c(1, 2, 3)   # Lanzamientos favorables B = c(1, 2, 3)
L_AB = c(1, 2) # Lanzamientos favorables AB = c(1, 2)
# Simular lanzamientos
D1 <- sample(1:6, N_lan, replace = TRUE)
A <- 0
B <- 0
AB <- 0
P_A_x_P_B <- numeric(N_lan)
P_AB <- numeric(N_lan)
# Conteo de casos
for (i in 1:N_lan) {
a <- FALSE
b <- FALSE
if (D1[i] %in% L_A) {
A <- A + 1
a <- TRUE
}
if (D1[i] %in% L_B) {  # D1 para B
B <- B + 1
b <- TRUE
}
if (a && b) {
AB <- AB + 1
}
# Calcular las probabilidades acumuladas
P_A_x_P_B[i] <- (A / i) * (B / i)
P_AB[i] <- AB / i
}
plot(1:N_lan, P_A_x_P_B, type = "l", col = "blue", ylim = c(0, 1), xlab = "Número de lanzamientos", ylab = "Probabilidad", main = "Independencia - Un Dado")
lines(1:N_lan, P_AB, col = "red")
legend("topright", legend = c("P(A)*P(B)", "P(A∩B)"), col = c("blue", "red"), lty = 1)
# Función para obtener el desarrollo de las apuestas
ruina <- function(fondos = 100, apuesta = 5){
vec_fondos <- c(fondos)  # Monto inicial
prob_ganar <- 8 / 19    # Probabilidad de ganar
while (0<fondos & fondos<=200) {
if (runif(1) < prob_ganar) {  # Generar un número aleatorio para determinar el resultado del juego
fondos <- fondos + apuesta  # Ganó
} else {
fondos <- fondos - apuesta  # Perdió, disminuye los fondos
}
vec_fondos <- c(vec_fondos, fondos)  # Guardar los fondos despues de cada iteracion
}
return(vec_fondos) # Devuelve un vector con el desarrollo de los fondos
}
plot(ruina(), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 5)")
plot(ruina(apuesta = 25), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 25)")
plot(ruina(apuesta = 50), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 50)")
ruina <- function(fondos = 100, apuesta = 5){
vec_fondos <- c(fondos)  # Monto inicial
prob_ganar <- 8 / 19    # Probabilidad de ganar
while (0<fondos & fondos<=200) {
if (runif(1) < prob_ganar) {  # Generar un número aleatorio para determinar el resultado del juego
fondos <- fondos + apuesta  # Ganó
} else {
fondos <- fondos - apuesta  # Perdió, disminuye los fondos
}
vec_fondos <- c(vec_fondos, fondos)  # Guardar los fondos despues de cada iteracion
}
return(vec_fondos) # Devuelve un vector con el desarrollo de los fondos
}
probabilidad_ruina <- function(apuesta = 5, n_simulaciones = 5000){
exitos <- 0  # Contador de éxitos
for (i in 1:n_simulaciones) {
final_fondos <- ruina(apuesta = apuesta)
if (final_fondos[length(final_fondos)] > 200) {
exitos <- exitos + 1  # Exito si se superan los 200 dólares
}
}
prob_exito <- exitos / n_simulaciones  # Calcular la probabilidad de éxito
return(prob_exito)
}
# Calcular la probabilidad de ruina para diferentes tamaños de apuesta
prob_ruina_5 <- probabilidad_ruina(apuesta = 5)
prob_ruina_25 <- probabilidad_ruina(apuesta = 25)
prob_ruina_50 <- probabilidad_ruina(apuesta = 50)
cat("Probabilidad de ruina con apuesta de 5 dólares:", prob_ruina_5, "\n")
cat("Probabilidad de ruina con apuesta de 25 dólares:", prob_ruina_25, "\n")
cat("Probabilidad de ruina con apuesta de 50 dólares:", prob_ruina_50, "\n")
