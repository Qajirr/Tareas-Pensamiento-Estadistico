right <- sample_mu_bmi + error
ci_bmi <- c(left, right)
#Se guardan los resultados
list_mean_bmi[i] <- sample_mu_bmi
list_interval_bmi[i, ] <- ci_bmi
#Se verifica si la media de la población se encuentra dentro del intérvalo de confianza
if (ci_bmi[1] <= media_pobl_bmi && ci_bmi[2] >= media_pobl_bmi) {
sucess_bmi <- sucess_bmi + 1
}
}
# Definimos tamaños de muestreo
tamano_muestra = 100
n_muestras = 5000
# Inicializamos estructuras necesarias
list_mean_bmi = vector()
list_interval_bmi = vector()
list_typeCI_bmi = vector()
list_prop_bmi = vector()
sucess_bmi = 0
list_mean_bgl = vector()
list_interval_bgl = vector()
list_typeCI_bgl = vector()
list_prop_bgl = vector()
sucess_bgl = 0
#función para calcular desviación estándar
sd.p <- function(x){sd(x)*sqrt((length(x)-1)/length(x))}
# Obtenemos la media y desviación estándar de cada columna
mu_bmi <- mean(datos$bmi)
sd_bmi <- sd.p(datos$bmi)
mu_bmi
sd_bmi
mu_glucose <- mean(datos$blood_glucose_level)
sd_glucose <- sd.p(datos$blood_glucose_level)
mu_glucose
sd_glucose
# Sampling distribution, calculo del intervalo de confianza y proporción.
for (i in 1:n_muestras) {
samples_bmi <- sample(datos$bmi, tamano_muestra, replace = TRUE)
sample_mu_bmi <- mean(samples_bmi)
sample_sd_glucose <- sd(samples_bmi)
#Calculo de intervalo de confianza
alpha <- 0.05
se <- sample_sd_glucose/sqrt(tamano_muestra)
error <- qnorm(1-alpha/2) * se
left <- sample_mu_bmi - error
right <- sample_mu_bmi + error
#Se guardan los resultados
list_mean_bmi[i] <- sample_mu_bmi
list_interval_bmi <- c(list_interval_bmi, left, right)
#Se verifica si la media de la población se encuentra dentro del intérvalo de confianza
if (ci_bmi[1] <= media_pobl_bmi && ci_bmi[2] >= media_pobl_bmi) {
sucess_bmi <- sucess_bmi + 1
}
}
# Definimos tamaños de muestreo
tamano_muestra = 100
n_muestras = 5000
# Inicializamos estructuras necesarias
list_mean_bmi = vector()
list_interval_bmi = vector()
list_typeCI_bmi = vector()
list_prop_bmi = vector()
sucess_bmi = 0
list_mean_bgl = vector()
list_interval_bgl = vector()
list_typeCI_bgl = vector()
list_prop_bgl = vector()
sucess_bgl = 0
#función para calcular desviación estándar
sd.p <- function(x){sd(x)*sqrt((length(x)-1)/length(x))}
# Obtenemos la media y desviación estándar de cada columna
mu_bmi <- mean(datos$bmi)
sd_bmi <- sd.p(datos$bmi)
mu_bmi
sd_bmi
mu_glucose <- mean(datos$blood_glucose_level)
sd_glucose <- sd.p(datos$blood_glucose_level)
mu_glucose
sd_glucose
# Sampling distribution, calculo del intervalo de confianza y proporción.
for (i in 1:n_muestras) {
samples_bmi <- sample(datos$bmi, tamano_muestra, replace = TRUE)
sample_mu_bmi <- mean(samples_bmi)
sample_sd_glucose <- sd(samples_bmi)
#Calculo de intervalo de confianza
alpha <- 0.05
se <- sample_sd_glucose/sqrt(tamano_muestra)
error <- qnorm(1-alpha/2) * se
left <- sample_mu_bmi - error
right <- sample_mu_bmi + error
#Se guardan los resultados
list_mean_bmi[i] <- sample_mu_bmi
list_interval_bmi <- c(list_interval_bmi, left, right)
#Se verifica si la media de la población se encuentra dentro del intérvalo de confianza
if (left <= mu_bmi && right >= mu_bmi) {
sucess_bmi <- sucess_bmi + 1
}
}
# Generamos dataframes para plotear mas facilmente los datos.
df_bmi <- data.frame(media = list_mean_bmi, ci_low = list_interval_bmi[,1], ci_high = list_interval_bmi[,2])
# Definimos tamaños de muestreo
tamano_muestra = 100
n_muestras = 5000
# Inicializamos estructuras necesarias
list_mean_bmi = vector()
list_interval_bmi = vector()
list_typeCI_bmi = vector()
list_prop_bmi = vector()
sucess_bmi = 0
list_mean_bgl = vector()
list_interval_bgl = vector()
list_typeCI_bgl = vector()
list_prop_bgl = vector()
sucess_bgl = 0
#función para calcular desviación estándar
sd.p <- function(x){sd(x)*sqrt((length(x)-1)/length(x))}
# Obtenemos la media y desviación estándar de cada columna
mu_bmi <- mean(datos$bmi)
sd_bmi <- sd.p(datos$bmi)
mu_bmi
sd_bmi
mu_glucose <- mean(datos$blood_glucose_level)
sd_glucose <- sd.p(datos$blood_glucose_level)
mu_glucose
sd_glucose
# Sampling distribution, calculo del intervalo de confianza y proporción.
for (i in 1:n_muestras) {
samples_bmi <- sample(datos$bmi, tamano_muestra, replace = TRUE)
sample_mu_bmi <- mean(samples_bmi)
sample_sd_glucose <- sd(samples_bmi)
#Calculo de intervalo de confianza
alpha <- 0.05
se <- sample_sd_glucose/sqrt(tamano_muestra)
error <- qnorm(1-alpha/2) * se
left <- sample_mu_bmi - error
right <- sample_mu_bmi + error
#Se guardan los resultados
list_mean_bmi[i] <- sample_mu_bmi
list_interval_bmi <- c(list_interval_bmi, left, right)
#Se verifica si la media de la población se encuentra dentro del intérvalo de confianza
if (left <= mu_bmi && right >= mu_bmi) {
sucess_bmi <- sucess_bmi + 1
}
}
# Generamos dataframes para plotear mas facilmente los datos.
# Convertimos el vector de intervalos en una matriz de dos columnas
list_interval_bmi_matrix <- matrix(list_interval_bmi, ncol = 2, byrow = TRUE)
# Generamos dataframes para plotear más fácilmente los datos
df_bmi <- data.frame(media = list_mean_bmi, ci_low = list_interval_bmi_matrix[, 1], ci_high = list_interval_bmi_matrix[, 2])
# Definir media_pobl_bmi para verificar
media_pobl_bmi <- mu_bmi
df_bmi$contiene_media <- (df_bmi$ci_low <= media_pobl_bmi & df_bmi$ci_high >= media_pobl_bmi)
# <- data.frame(media = list_mean_bgl, ci_low = list_interval_bgl[,1], ci_high = list_interval_bgl[,2])
#df_bmi$contiene_media <- (df_bmi$ci_low <= media_pobl_bmi & df_bmi$ci_high >= media_pobl_bmi)
#df_bgl$contiene_media <- (df_bgl$ci_low <= media_pobl_bgl & df_bgl$ci_high >= media_pobl_bgl)
# Plot de Intervalos de confianza
ggplot(df_bgl, aes(x = media)) +
geom_point(aes(y = 1:n_muestras), color = 'red') +
geom_errorbar(aes(ymin = ci_low, ymax = ci_high), color = 'red') +
ggtitle('Blood Glucose Level: Medias y Intervalos de Confianza (con σ poblacional)') +
theme_minimal()
# Plot de Intervalos de confianza
p_bmi <- ggplot(df_bmi, aes(x = media, y = 1:n_muestras)) +
geom_point() +
geom_errorbarh(aes(xmin = ci_low, xmax = ci_high), height = 0.1) +
geom_vline(xintercept = mu_bmi, color = "red", linetype = "dashed") +
ggtitle("Distribución de Muestreo - BMI") +
xlab("Media") + ylab("Muestras")
# Definimos tamaños de muestreo
tamano_muestra = 100
n_muestras = 5000
# Inicializamos estructuras necesarias
list_mean_bmi = vector()
list_interval_bmi = vector()
list_typeCI_bmi = vector()
list_prop_bmi = vector()
sucess_bmi = 0
list_mean_bgl = vector()
list_interval_bgl = vector()
list_typeCI_bgl = vector()
list_prop_bgl = vector()
sucess_bgl = 0
#función para calcular desviación estándar
sd.p <- function(x){sd(x)*sqrt((length(x)-1)/length(x))}
# Obtenemos la media y desviación estándar de cada columna
mu_bmi <- mean(datos$bmi)
sd_bmi <- sd.p(datos$bmi)
mu_bmi
sd_bmi
mu_glucose <- mean(datos$blood_glucose_level)
sd_glucose <- sd.p(datos$blood_glucose_level)
mu_glucose
sd_glucose
# Sampling distribution, calculo del intervalo de confianza y proporción.
for (i in 1:n_muestras) {
samples_bmi <- sample(datos$bmi, tamano_muestra, replace = TRUE)
sample_mu_bmi <- mean(samples_bmi)
sample_sd_glucose <- sd(samples_bmi)
#Calculo de intervalo de confianza
alpha <- 0.05
se <- sample_sd_glucose/sqrt(tamano_muestra)
error <- qnorm(1-alpha/2) * se
left <- sample_mu_bmi - error
right <- sample_mu_bmi + error
#Se guardan los resultados
list_mean_bmi[i] <- sample_mu_bmi
list_interval_bmi <- c(list_interval_bmi, left, right)
#Se verifica si la media de la población se encuentra dentro del intérvalo de confianza
if (left <= mu_bmi && right >= mu_bmi) {
sucess_bmi <- sucess_bmi + 1
}
}
# Generamos dataframes para plotear mas facilmente los datos.
# Convertimos el vector de intervalos en una matriz de dos columnas
list_interval_bmi_matrix <- matrix(list_interval_bmi, ncol = 2, byrow = TRUE)
# Generamos dataframes para plotear más fácilmente los datos
df_bmi <- data.frame(media = list_mean_bmi, ci_low = list_interval_bmi_matrix[, 1], ci_high = list_interval_bmi_matrix[, 2]) ci_high = list_interval_bmi_matrix[, 2])
# Definimos tamaños de muestreo
tamano_muestra = 100
n_muestras = 5000
# Inicializamos estructuras necesarias
list_mean_bmi = vector()
list_interval_bmi = vector()
list_typeCI_bmi = vector()
list_prop_bmi = vector()
sucess_bmi = 0
list_mean_bgl = vector()
list_interval_bgl = vector()
list_typeCI_bgl = vector()
list_prop_bgl = vector()
sucess_bgl = 0
#función para calcular desviación estándar
sd.p <- function(x){sd(x)*sqrt((length(x)-1)/length(x))}
# Obtenemos la media y desviación estándar de cada columna
mu_bmi <- mean(datos$bmi)
sd_bmi <- sd.p(datos$bmi)
mu_bmi
sd_bmi
mu_glucose <- mean(datos$blood_glucose_level)
sd_glucose <- sd.p(datos$blood_glucose_level)
mu_glucose
sd_glucose
# Sampling distribution, calculo del intervalo de confianza y proporción.
for (i in 1:n_muestras) {
samples_bmi <- sample(datos$bmi, tamano_muestra, replace = TRUE)
sample_mu_bmi <- mean(samples_bmi)
sample_sd_glucose <- sd(samples_bmi)
#Calculo de intervalo de confianza
alpha <- 0.05
se <- sample_sd_glucose/sqrt(tamano_muestra)
error <- qnorm(1-alpha/2) * se
left <- sample_mu_bmi - error
right <- sample_mu_bmi + error
#Se guardan los resultados
list_mean_bmi[i] <- sample_mu_bmi
list_interval_bmi <- c(list_interval_bmi, left, right)
#Se verifica si la media de la población se encuentra dentro del intérvalo de confianza
if (left <= mu_bmi && right >= mu_bmi) {
sucess_bmi <- sucess_bmi + 1
}
}
# Generamos dataframes para plotear mas facilmente los datos.
# Convertimos el vector de intervalos en una matriz de dos columnas
list_interval_bmi_matrix <- matrix(list_interval_bmi, ncol = 2, byrow = TRUE)
# Generamos dataframes para plotear más fácilmente los datos
df_bmi <- data.frame(media = list_mean_bmi, ci_low = list_interval_bmi_matrix[, 1], ci_high = list_interval_bmi_matrix[, 2])
# Definir media_pobl_bmi para verificar
media_pobl_bmi <- mu_bmi
df_bmi$contiene_media <- (df_bmi$ci_low <= media_pobl_bmi & df_bmi$ci_high >= media_pobl_bmi)
# <- data.frame(media = list_mean_bgl, ci_low = list_interval_bgl[,1], ci_high = list_interval_bgl[,2])
conteo_bmi <- sum(df_bmi$contiene_media)
#df_bmi$contiene_media <- (df_bmi$ci_low <= media_pobl_bmi & df_bmi$ci_high >= media_pobl_bmi)
#df_bgl$contiene_media <- (df_bgl$ci_low <= media_pobl_bgl & df_bgl$ci_high >= media_pobl_bgl)
# Plot de Intervalos de confianza
p_bmi <- ggplot(df_bmi, aes(x = media, y = 1:n_muestras)) +
geom_point() +
geom_errorbarh(aes(xmin = ci_low, xmax = ci_high), height = 0.1) +
geom_vline(xintercept = mu_bmi, color = "red", linetype = "dashed") +
ggtitle("Distribución de Muestreo - BMI") +
xlab("Media") + ylab("Muestras")
# Plot de Intervalos de confianza
p_bmi <- ggplot(df_bmi, aes(x = media, y = 1:n_muestras)) +
geom_point() +
geom_errorbarh(aes(xmin = ci_low, xmax = ci_high), height = 0.1) +
geom_vline(xintercept = mu_bmi, color = "red", linetype = "dashed") +
ggtitle("Distribución de Muestreo - BMI") +
xlab("Media") + ylab("Muestras")
p_bmi
# Plot de Intervalos de confianza
p_bmi <- ggplot(df_bmi, aes(x = media, y = 1:100)) +
geom_point() +
geom_errorbarh(aes(xmin = ci_low, xmax = ci_high), height = 0.1) +
geom_vline(xintercept = mu_bmi, color = "red", linetype = "dashed") +
ggtitle("Distribución de Muestreo - BMI") +
xlab("Media") + ylab("Muestras")
p_bmi
# Plot de Intervalos de confianza
p_bmi <- ggplot(df_bmi, aes(x = media, y = 1:n_muestras)) +
geom_point() +
geom_errorbarh(aes(xmin = ci_low, xmax = ci_high), height = 0.1) +
geom_vline(xintercept = mu_bmi, color = "red", linetype = "dashed") +
ggtitle("Distribución de Muestreo - BMI") +
xlab("Media") + ylab("Muestras")
p_bmi
# Plot de Intervalos de confianza
p_bmi <- ggplot(df_bmi[;100], aes(x = media, y = 1:n_muestras)) +
# Plot de Intervalos de confianza
p_bmi <- ggplot(df_bmi, aes(x = media, y = 1:n_muestras)) +
geom_point() +
geom_errorbarh(aes(xmin = ci_low, xmax = ci_high), height = 0.1) +
geom_vline(xintercept = mu_bmi, color = "red", linetype = "dashed") +
ggtitle("Distribución de Muestreo - BMI") +
xlab("Media") + ylab("Muestras")
p_bmi
# Plot de Intervalos de confianza
p_bmi <- ggplot(df_bmi, aes(x = 1:n_muestras, y = media)) +
geom_point(color = "blue") +
geom_errorbar(aes(ymin = ci_low, ymax = ci_high), width = 0.2, color = "blue") +
geom_hline(yintercept = mu_bmi, linetype = "dashed", color = "red") +
ggtitle("Medias y Intervalos de Confianza - BMI") +
xlab("Iteraciones") + ylab("Media de BMI") +
theme_minimal()
p_bmi
# Plot de Intervalos de confianza
p_bmi <- ggplot(sample_bmi, aes(x = 1:n_muestras, y = media)) +
geom_point(color = "blue") +
geom_errorbar(aes(ymin = ci_low, ymax = ci_high), width = 0.2, color = "blue") +
geom_hline(yintercept = mu_bmi, linetype = "dashed", color = "red") +
ggtitle("Medias y Intervalos de Confianza - BMI") +
xlab("Iteraciones") + ylab("Media de BMI") +
theme_minimal()
# Definimos tamaños de muestreo
tamano_muestra = 100
n_muestras = 5000
# Inicializamos estructuras necesarias
list_mean_bmi = vector()
list_interval_bmi = vector()
list_typeCI_bmi = vector()
list_prop_bmi = vector()
sucess_bmi = 0
list_mean_bgl = vector()
list_interval_bgl = vector()
list_typeCI_bgl = vector()
list_prop_bgl = vector()
sucess_bgl = 0
#función para calcular desviación estándar
sd.p <- function(x){sd(x)*sqrt((length(x)-1)/length(x))}
# Obtenemos la media y desviación estándar de cada columna
mu_bmi <- mean(datos$bmi)
sd_bmi <- sd.p(datos$bmi)
mu_bmi
sd_bmi
mu_glucose <- mean(datos$blood_glucose_level)
sd_glucose <- sd.p(datos$blood_glucose_level)
mu_glucose
sd_glucose
alpha <- 0.05
# Sampling distribution, calculo del intervalo de confianza y proporción.
for (i in 1:n_muestras) {
### Para bmi ###
samples_bmi <- sample(datos$bmi, tamano_muestra, replace = TRUE)
sample_mu_bmi <- mean(samples_bmi)
sample_sd_bmi <- sd(samples_bmi)
# Calculo de intervalo de confianza
se_bmi <- sample_sd_bmi/sqrt(tamano_muestra)
error_bmi <- qnorm(1-alpha/2) * se_bmi
left_bmi <- sample_mu_bmi - error_bmi
right_bmi <- sample_mu_bmi + error_bmi
# Se guardan los resultados
list_mean_bmi[i] <- sample_mu_bmi
list_interval_bmi <- c(list_interval_bmi, left_bmi, right_bmi)
list_prop_bmi[i] <- succes_bmi/i
# Se verifica si la media de la población se encuentra dentro del intérvalo de confianza
if (left_bmi <= mu_bmi && right_bmi >= mu_bmi) {
sucess_bmi <- sucess_bmi + 1
}
### Para blood_glucose_level ###
samples_glucose <- sample(datos$blood_glucose_level, tamano_muestra, replace = TRUE)
sample_mu_glucose <- mean(samples_glucose)
sample_sd_glucose <- sd(samples_glucose)
# Calculo de intervalo de confianza
se_glucose <- sample_sd_glucose / sqrt(tamano_muestra)
error_glucose <- qnorm(1 - alpha / 2) * se_glucose
left_glucose <- sample_mu_glucose - error_glucose
right_glucose <- sample_mu_glucose + error_glucose
# Se guardan los resultados
list_mean_bgl[i] <- sample_mu_glucose
list_interval_bgl <- c(list_interval_bgl, left_glucose, right_glucose)
list_prop_bgl[i] <- sucess_bgl / i
# Se verifica si la media de la población se encuentra dentro del intérvalo de confianza
if (left_glucose <= mu_glucose && right_glucose >= mu_glucose) {
sucess_bgl <- sucess_bgl + 1
}
}
linearMod <- lm(bmi ~ age, data=datos)
print(linearMod)
m <- linearMod$coefficients["age"]
b <- linearMod$coefficients["(Intercept)"]
ggplot() +
geom_point(aes(x=datos$age, y=datos$bmi)) +
geom_line(aes(x=datos$age, y=datos$age*m+b), color="red") +
ggtitle("Regresión lineal") +
ylab("bmi") +
xlab("Age")
# Manipulación de estructuras
library(tidyverse)
# Para realizar plots
library(ggplot2)
library(plotly)
# Manipulación de varios plots en una imagen.
library(gridExtra)
m <- linearMod$coefficients["age"]
b <- linearMod$coefficients["(Intercept)"]
ggplot() +
geom_point(aes(x=datos$age, y=datos$bmi)) +
geom_line(aes(x=datos$age, y=datos$age*m+b), color="red") +
ggtitle("Regresión lineal") +
ylab("bmi") +
xlab("Age")
nrow(datos)
# Bootstrap
B <- 500
largo <- 100000
output_m <- numeric(B)
output_b <- numeric(B)
set.seed(99)  # Fijar semilla para reproducibilidad
for (it in 1:B) {
# Tomar una muestra con reemplazo de los datos
sample_indices <- sample(1:largo, largo, replace = TRUE)
sample_data <- datos[sample_indices, ]
# Ajustar la regresión lineal con la muestra
bootstrap_model <- lm(bmi ~ age, data = sample_data)
# Guardar los coeficientes en las salidas correspondientes
output_m[it] <- bootstrap_model$coefficients["age"]
output_b[it] <- bootstrap_model$coefficients["(Intercept)"]
}
# Mostrar algunos resultados del bootstrap
head(output_m)
head(output_b)
# Obtenemos error e intervalos de confianze
se_m <- sd(output_m)
z_a2 <- qnorm(1 - alpha / 2)
alpha <- 0.05
# límite inferios
l.CI <- mean(output_m) - z_a2 * se_m
# límite superior
u.CI <- mean(output_m) + z_a2 * se_m
sprintf('El intervalo de confidencia de 95%% de las varianzas es: (%.3f,%.3f)', l.CI , u.CI)
sprintf('El SE de la varianzas es: (%.3f)', se_m)
# Obtenemos error e intervalos de confianze
se_m <- sd(output_m)
z_a2 <- qnorm(1 - alpha / 2)
alpha <- 0.05
# límite inferios
l.CI <- mean(output_b) - z_a2 * se_b
# Obtenemos error e intervalos de confianze
se_b <- sd(output_m)
z_a2 <- qnorm(1 - alpha / 2)
alpha <- 0.05
# límite inferios
l.CI <- mean(output_b) - z_a2 * se_b
# límite superior
u.CI <- mean(output_b) + z_a2 * se_b
sprintf('El intervalo de confidencia de 95%% de los sesgos es: (%.3f,%.3f)', l.CI , u.CI)
sprintf('El SE del sesgo es: (%.3f)', se_b)
length(datos)
length(datos$bmi)
length(datos$age)
# Bootstrap
B <- 500
largo <- length(datos$bmi)
output_m <- numeric(B)
output_b <- numeric(B)
set.seed(99)  # Fijar semilla para reproducibilidad
for (it in 1:B) {
# Tomar una muestra con reemplazo de los datos
sample_indices <- sample(1:largo, largo, replace = TRUE)
sample_data <- datos[sample_indices, ]
# Ajustar la regresión lineal con la muestra
bootstrap_model <- lm(bmi ~ age, data = sample_data)
# Guardar los coeficientes en las salidas correspondientes
output_m[it] <- bootstrap_model$coefficients["age"]
output_b[it] <- bootstrap_model$coefficients["(Intercept)"]
}
# Mostrar algunos resultados del bootstrap
head(output_m)
head(output_b)
# Gráfico de puntos
plot(output_m, main = "Varianzas obtenidas con Bootstrap",
ylab = "Varianza", xlab = "Muestra de Bootstrap")
abline(h = real_variance, col = "red", lty = 2) # Línea roja para la varianza real
# Bootstrap
B <- 500
largo <- length(datos$bmi)
output_m <- numeric(B)
output_b <- numeric(B)
for (it in 1:B) {
# Tomar una muestra con reemplazo de los datos
sample_indices <- sample(1:largo, largo, replace = TRUE)
sample_data <- datos[sample_indices, ]
# Ajustar la regresión lineal con la muestra
bootstrap_model <- lm(bmi ~ age, data = sample_data)
# Guardar los coeficientes en las salidas correspondientes
output_m[it] <- bootstrap_model$coefficients["age"]
output_b[it] <- bootstrap_model$coefficients["(Intercept)"]
}
# Mostrar algunos resultados del bootstrap
head(output_m)
head(output_b)
# Valor real de la varianza
real_variance_m <- var(datos$age)
real_variance_b <- var(datos$(Intercept))
