ll_plot_mediana <- function(mu, sigma) {
likelihood <- -sum(dnorm(medis, mean = mu, sd = sigma, log = TRUE))
return(likelihood)
}
ll_plot <- Vectorize(ll_plot)
# definir espacio donde se va a evaluar ll_plot
mu_d <- seq(26, 28, length.out = 100)
sigma_d <- seq(1, 5, length.out = 100)
likelihood_d <- outer(X=mu_d, Y=sigma_d, ll_plot)
filled.contour(x=mu_d, y=sigma_d, z=likelihood_d, xlab=expression(mu),
ylab=expression(sigma), color = topo.colors)
likelihood_mean <- function(param) {
# Definimos los parametros de entrada de la funcion
mu <- param[1]
sigma <- param[2]
# Definimos la likelihood como la suma logarítmica de la función de densidad
log_likelihood <- -sum(dnorm(means, mean = mu, sd = sigma, log = TRUE))
return(log_likelihood)
}
# Agrrgue el rango donde operará nlminb
result_mean <- nlminb(objective = likelihood_mean,
start = c(mu = 26, sigma = 2),  # Valores iniciales
lower = c(mu = 25, sigma = 1),  # Límite inferior
upper = c(mu = 30, sigma = 5))   # Límite superior
# Mostrar los resultados
cat("Estimación por Máxima Verosimilitud para la media:\n")
cat("Mu óptimo:", result_mean$par[1], "\n")
cat("Sigma óptimo:", result_mean$par[2], "\n")
likelihood_mean <- function(param) {
# Definimos los parametros de entrada de la funcion
mu <- param[1]
sigma <- param[2]
# Definimos la likelihood como la suma logarítmica de la función de densidad
log_likelihood <- -sum(dnorm(means, mean = mu, sd = sigma, log = TRUE))
return(log_likelihood)
}
# Agrrgue el rango donde operará nlminb
result_mean <- nlminb(objective = likelihood_mean,
start = c(mu = 26, sigma = 2),  # Valores iniciales
lower = c(mu = 0, sigma = 0),  # Límite inferior
upper = c(mu = 50, sigma = 10))   # Límite superior
# Mostrar los resultados
cat("Estimación por Máxima Verosimilitud para la media:\n")
cat("Mu óptimo:", result_mean$par[1], "\n")
cat("Sigma óptimo:", result_mean$par[2], "\n")
likelihood_med <- function(param) {
# Definimos los parametros de entrada de la funcion
mu <- param[1]
sigma <- param[2]
# Definimos la likelihood como la suma logarítmica de la función de densidad
log_likelihood <- -sum(dnorm(medis, mean = mu, sd = sigma, log = TRUE))
return(log_likelihood)
}
# Agrrgue el rango donde operará nlminb
result_med <- nlminb(objective = likelihood_med,
start = c(mu = 26, sigma = 2),  # Valores iniciales
lower = c(mu = 0, sigma = 0),  # Límite inferior
upper = c(mu = 50, sigma = 10))   # Límite superior
cat("Estimación por Máxima Verosimilitud para la mediana:\n")
cat("Mu óptimo:", result_med$par[1], "\n")
cat("Sigma óptimo:", result_med$par[2], "\n")
# Media
# función log likelihood
ll_plot <- function(mu, sigma) {
likelihood <- -sum(dnorm(means, mean = mu, sd = sigma, log = TRUE))
return(likelihood)
}
ll_plot <- Vectorize(ll_plot)
# Definir el espacio donde se va a evaluar ll_plot
mu_m <- seq(25, 30, length.out = 100)    # Rango de valores para la media
sigma_m <- seq(1, 5, length.out = 100)   # Rango de valores para la desviación estándar
likelihood_m <- outer(X = mu_m, Y = sigma_m, ll_plot)
filled.contour(x = mu_m, y = sigma_m, z = likelihood_m, xlab = expression(mu),
ylab = expression(sigma), color = topo.colors,
main = "Log Likelihood para la Media")
# Mediana
# definir espacio donde se va a evaluar ll_plot
mu_d <- seq(26, 28, length.out = 100)
sigma_d <- seq(0, 3, length.out = 100)
likelihood_d <- outer(X=mu_d, Y=sigma_d, ll_plot)
filled.contour(x=mu_d, y=sigma_d, z=likelihood_d, xlab=expression(mu),
ylab=expression(sigma), color = topo.colors)
likelihood_med <- function(param) {
# Definimos los parametros de entrada de la funcion
mu <- param[1]
sigma <- param[2]
# Definimos la likelihood como la suma logarítmica de la función de densidad
log_likelihood <- -sum(dnorm(medis, mean = mu, sd = sigma, log = TRUE))
return(log_likelihood)
}
# Agrrgue el rango donde operará nlminb
result_med <- nlminb(objective = likelihood_med,
start = c(mu = 26, sigma = 2),  # Valores iniciales
lower = c(mu = 0, sigma = 0),  # Límite inferior
upper = c(mu = 50, sigma = 10))   # Límite superior
cat("Estimación por Máxima Verosimilitud para la mediana:\n")
cat("Mu óptimo:", result_med$par[1], "\n")
cat("Sigma óptimo:", result_med$par[2], "\n")
# Media
# función log likelihood
ll_plot <- function(mu, sigma) {
likelihood <- -sum(dnorm(means, mean = mu, sd = sigma, log = TRUE))
return(likelihood)
}
ll_plot <- Vectorize(ll_plot)
# Definir el espacio donde se va a evaluar ll_plot
mu_m <- seq(25, 30, length.out = 100)    # Rango de valores para la media
sigma_m <- seq(0, 3, length.out = 100)   # Rango de valores para la desviación estándar
likelihood_m <- outer(X = mu_m, Y = sigma_m, ll_plot)
filled.contour(x = mu_m, y = sigma_m, z = likelihood_m, xlab = expression(mu),
ylab = expression(sigma), color = topo.colors,
main = "Log Likelihood para la Media")
# Media
# función log likelihood
ll_plot <- function(mu, sigma) {
likelihood <- -sum(dnorm(means, mean = mu, sd = sigma, log = TRUE))
return(likelihood)
}
ll_plot <- Vectorize(ll_plot)
# Definir el espacio donde se va a evaluar ll_plot
mu_m <- seq(27, 28, length.out = 100)    # Rango de valores para la media
sigma_m <- seq(0, 3, length.out = 100)   # Rango de valores para la desviación estándar
likelihood_m <- outer(X = mu_m, Y = sigma_m, ll_plot)
filled.contour(x = mu_m, y = sigma_m, z = likelihood_m, xlab = expression(mu),
ylab = expression(sigma), color = topo.colors,
main = "Log Likelihood para la Media")
# Media
# función log likelihood
ll_plot <- function(mu, sigma) {
likelihood <- -sum(dnorm(means, mean = mu, sd = sigma, log = TRUE))
return(likelihood)
}
ll_plot <- Vectorize(ll_plot)
# Definir el espacio donde se va a evaluar ll_plot
mu_m <- seq(27, 28, length.out = 100)    # Rango de valores para la media
sigma_m <- seq(0, 1, length.out = 100)   # Rango de valores para la desviación estándar
likelihood_m <- outer(X = mu_m, Y = sigma_m, ll_plot)
filled.contour(x = mu_m, y = sigma_m, z = likelihood_m, xlab = expression(mu),
ylab = expression(sigma), color = topo.colors,
main = "Log Likelihood para la Media")
# Media
# función log likelihood
ll_plot <- function(mu, sigma) {
likelihood <- -sum(dnorm(means, mean = mu, sd = sigma, log = TRUE))
return(likelihood)
}
ll_plot <- Vectorize(ll_plot)
# Definir el espacio donde se va a evaluar ll_plot
mu_m <- seq(27, 28, length.out = 10)    # Rango de valores para la media
sigma_m <- seq(0, 1, length.out = 10)   # Rango de valores para la desviación estándar
likelihood_m <- outer(X = mu_m, Y = sigma_m, ll_plot)
filled.contour(x = mu_m, y = sigma_m, z = likelihood_m, xlab = expression(mu),
ylab = expression(sigma), color = topo.colors,
main = "Log Likelihood para la Media")
# Media
# función log likelihood
ll_plot <- function(mu, sigma) {
likelihood <- -sum(dnorm(means, mean = mu, sd = sigma, log = TRUE))
return(likelihood)
}
ll_plot <- Vectorize(ll_plot)
# Definir el espacio donde se va a evaluar ll_plot
mu_m <- seq(27, 28, length.out = 10)    # Rango de valores para la media
sigma_m <- seq(0.01, 1, length.out = 10)   # Rango de valores para la desviación estándar
likelihood_m <- outer(X = mu_m, Y = sigma_m, ll_plot)
filled.contour(x = mu_m, y = sigma_m, z = likelihood_m, xlab = expression(mu),
ylab = expression(sigma), color = topo.colors,
main = "Log Likelihood para la Media")
# Media
# función log likelihood
ll_plot <- function(mu, sigma) {
likelihood <- -sum(dnorm(means, mean = mu, sd = sigma, log = TRUE))
return(likelihood)
}
ll_plot <- Vectorize(ll_plot)
# Definir el espacio donde se va a evaluar ll_plot
mu_m <- seq(26, 29, length.out = 10)    # Rango de valores para la media
sigma_m <- seq(0.01, 1, length.out = 10)   # Rango de valores para la desviación estándar
likelihood_m <- outer(X = mu_m, Y = sigma_m, ll_plot)
filled.contour(x = mu_m, y = sigma_m, z = likelihood_m, xlab = expression(mu),
ylab = expression(sigma), color = topo.colors,
main = "Log Likelihood para la Media")
# Media
# función log likelihood
ll_plot <- function(mu, sigma) {
likelihood <- -sum(dnorm(means, mean = mu, sd = sigma, log = TRUE))
return(likelihood)
}
ll_plot <- Vectorize(ll_plot)
# Definir el espacio donde se va a evaluar ll_plot
mu_m <- seq(26, 30, length.out = 10)    # Rango de valores para la media
sigma_m <- seq(0.01, 1, length.out = 10)   # Rango de valores para la desviación estándar
likelihood_m <- outer(X = mu_m, Y = sigma_m, ll_plot)
filled.contour(x = mu_m, y = sigma_m, z = likelihood_m, xlab = expression(mu),
ylab = expression(sigma), color = topo.colors,
main = "Log Likelihood para la Media")
# Media
# función log likelihood
ll_plot <- function(mu, sigma) {
likelihood <- -sum(dnorm(means, mean = mu, sd = sigma, log = TRUE))
return(likelihood)
}
ll_plot <- Vectorize(ll_plot)
# Definir el espacio donde se va a evaluar ll_plot
mu_m <- seq(26, 35, length.out = 10)    # Rango de valores para la media
sigma_m <- seq(0.01, 1, length.out = 10)   # Rango de valores para la desviación estándar
likelihood_m <- outer(X = mu_m, Y = sigma_m, ll_plot)
filled.contour(x = mu_m, y = sigma_m, z = likelihood_m, xlab = expression(mu),
ylab = expression(sigma), color = topo.colors,
main = "Log Likelihood para la Media")
# Media
# función log likelihood
ll_plot <- function(mu, sigma) {
likelihood <- -sum(dnorm(means, mean = mu, sd = sigma, log = TRUE))
return(likelihood)
}
ll_plot <- Vectorize(ll_plot)
# Definir el espacio donde se va a evaluar ll_plot
mu_m <- seq(26, 50, length.out = 10)    # Rango de valores para la media
sigma_m <- seq(0.01, 1, length.out = 10)   # Rango de valores para la desviación estándar
likelihood_m <- outer(X = mu_m, Y = sigma_m, ll_plot)
filled.contour(x = mu_m, y = sigma_m, z = likelihood_m, xlab = expression(mu),
ylab = expression(sigma), color = topo.colors,
main = "Log Likelihood para la Media")
# Media
# función log likelihood
ll_plot <- function(mu, sigma) {
likelihood <- -sum(dnorm(means, mean = mu, sd = sigma, log = TRUE))
return(likelihood)
}
ll_plot <- Vectorize(ll_plot)
# Definir el espacio donde se va a evaluar ll_plot
mu_m <- seq(26, 500, length.out = 10)    # Rango de valores para la media
sigma_m <- seq(0.01, 1, length.out = 10)   # Rango de valores para la desviación estándar
likelihood_m <- outer(X = mu_m, Y = sigma_m, ll_plot)
filled.contour(x = mu_m, y = sigma_m, z = likelihood_m, xlab = expression(mu),
ylab = expression(sigma), color = topo.colors,
main = "Log Likelihood para la Media")
# Media
# función log likelihood
ll_plot <- function(mu, sigma) {
likelihood <- -sum(dnorm(means, mean = mu, sd = sigma, log = TRUE))
return(likelihood)
}
ll_plot <- Vectorize(ll_plot)
# Definir el espacio donde se va a evaluar ll_plot
mu_m <- seq(26, 28, length.out = 10)    # Rango de valores para la media
sigma_m <- seq(0.01, 1, length.out = 10)   # Rango de valores para la desviación estándar
likelihood_m <- outer(X = mu_m, Y = sigma_m, ll_plot)
filled.contour(x = mu_m, y = sigma_m, z = likelihood_m, xlab = expression(mu),
ylab = expression(sigma), color = topo.colors,
main = "Log Likelihood para la Media")
# Media
# función log likelihood
ll_plot <- function(mu, sigma) {
likelihood <- -sum(dnorm(means, mean = mu, sd = sigma, log = TRUE))
return(likelihood)
}
ll_plot <- Vectorize(ll_plot)
# Definir el espacio donde se va a evaluar ll_plot
mu_m <- seq(26, 29, length.out = 10)    # Rango de valores para la media
sigma_m <- seq(0.01, 1, length.out = 10)   # Rango de valores para la desviación estándar
likelihood_m <- outer(X = mu_m, Y = sigma_m, ll_plot)
filled.contour(x = mu_m, y = sigma_m, z = likelihood_m, xlab = expression(mu),
ylab = expression(sigma), color = topo.colors,
main = "Log Likelihood para la Media")
# Media
# función log likelihood
ll_plot <- function(mu, sigma) {
likelihood <- -sum(dnorm(means, mean = mu, sd = sigma, log = TRUE))
return(likelihood)
}
ll_plot <- Vectorize(ll_plot)
# Definir el espacio donde se va a evaluar ll_plot
mu_m <- seq(26, 29, length.out = 10)    # Rango de valores para la media
sigma_m <- seq(0.01, 2, length.out = 10)   # Rango de valores para la desviación estándar
likelihood_m <- outer(X = mu_m, Y = sigma_m, ll_plot)
filled.contour(x = mu_m, y = sigma_m, z = likelihood_m, xlab = expression(mu),
ylab = expression(sigma), color = topo.colors,
main = "Log Likelihood para la Media")
# Media
# función log likelihood
ll_plot <- function(mu, sigma) {
likelihood <- -sum(dnorm(means, mean = mu, sd = sigma, log = TRUE))
return(likelihood)
}
ll_plot <- Vectorize(ll_plot)
# Definir el espacio donde se va a evaluar ll_plot
mu_m <- seq(26, 29, length.out = 100)    # Rango de valores para la media
sigma_m <- seq(0.01, 2, length.out = 100)   # Rango de valores para la desviación estándar
likelihood_m <- outer(X = mu_m, Y = sigma_m, ll_plot)
filled.contour(x = mu_m, y = sigma_m, z = likelihood_m, xlab = expression(mu),
ylab = expression(sigma), color = topo.colors,
main = "Log Likelihood para la Media")
# Media
# función log likelihood
ll_plot <- function(mu, sigma) {
likelihood <- -sum(dnorm(means, mean = mu, sd = sigma, log = TRUE))
return(likelihood)
}
ll_plot <- Vectorize(ll_plot)
# Definir el espacio donde se va a evaluar ll_plot
mu_m <- seq(26, 29, length.out = 10)    # Rango de valores para la media
sigma_m <- seq(0.01, 2, length.out = 10)   # Rango de valores para la desviación estándar
likelihood_m <- outer(X = mu_m, Y = sigma_m, ll_plot)
filled.contour(x = mu_m, y = sigma_m, z = likelihood_m, xlab = expression(mu),
ylab = expression(sigma), color = topo.colors,
main = "Log Likelihood para la Media")
# Media
# función log likelihood
ll_plot <- function(mu, sigma) {
likelihood <- -sum(dnorm(means, mean = mu, sd = sigma, log = TRUE))
return(likelihood)
}
ll_plot <- Vectorize(ll_plot)
# Definir el espacio donde se va a evaluar ll_plot
mu_m <- seq(26, 29, length.out = 10)    # Rango de valores para la media
sigma_m <- seq(0.01, 1, length.out = 10)   # Rango de valores para la desviación estándar
likelihood_m <- outer(X = mu_m, Y = sigma_m, ll_plot)
filled.contour(x = mu_m, y = sigma_m, z = likelihood_m, xlab = expression(mu),
ylab = expression(sigma), color = topo.colors,
main = "Log Likelihood para la Media")
# Mediana
# definir espacio donde se va a evaluar ll_plot
mu_d <- seq(26, 28, length.out = 10)
sigma_d <- seq(01, 1, length.out = 10)
likelihood_d <- outer(X=mu_d, Y=sigma_d, ll_plot)
filled.contour(x=mu_d, y=sigma_d, z=likelihood_d, xlab=expression(mu),
ylab=expression(sigma), color = topo.colors)
# Mediana
# función log likelihood
ll_plot <- function(mu, sigma) {
likelihood <- -sum(dnorm(means, mean = mu, sd = sigma, log = TRUE))
return(likelihood)
}
# definir espacio donde se va a evaluar ll_plot
mu_d <- seq(26, 28, length.out = 10)
sigma_d <- seq(01, 3, length.out = 10)
likelihood_d <- outer(X=mu_d, Y=sigma_d, ll_plot)
# Mediana
# función log likelihood
ll_plot <- function(mu, sigma) {
likelihood <- -sum(dnorm(means, mean = mu, sd = sigma, log = TRUE))
return(likelihood)
}
# definir espacio donde se va a evaluar ll_plot
mu_d <- seq(26, 28, length.out = 10)
sigma_d <- seq(01, 3, length.out = 10)
likelihood_d <- outer(X=mu_d, Y=sigma_d, ll_plot)
# Mediana
# función log likelihood
ll_plot <- function(mu, sigma) {
likelihood <- -sum(dnorm(means, mean = mu, sd = sigma, log = TRUE))
return(likelihood)
}
# definir espacio donde se va a evaluar ll_plot
mu_d <- seq(26, 28, length.out = 100)
sigma_d <- seq(01, 3, length.out = 100)
likelihood_d <- outer(X=mu_d, Y=sigma_d, ll_plot)
# Mediana
# función log likelihood
ll_plot <- function(mu, sigma) {
likelihood <- -sum(dnorm(means, mean = mu, sd = sigma, log = TRUE))
return(likelihood)
}
# definir espacio donde se va a evaluar ll_plot
mu_d <- seq(26, 28, length.out = 1)
sigma_d <- seq(01, 3, length.out = 1)
likelihood_d <- outer(X=mu_d, Y=sigma_d, ll_plot)
filled.contour(x=mu_d, y=sigma_d, z=likelihood_d, xlab=expression(mu),
ylab=expression(sigma), color = topo.colors)
# Manipulación de estructuras
library(tidyverse)
# Para realizar plots
library(ggplot2)
library(plotly)
# Manipulación de varios plots en una imagen.
library(gridExtra)
# Función para generar los estimadores
calcular_estimador <- function(n, sigma) {
# Simulación de las X_i ~ Bernoulli(0.5)
X <- rbinom(n, 1, 0.5)
# Ruido epsilon_sigma ~ N(0, sigma)
epsilon_sigma <- rnorm(1, mean = 0, sd = sigma)
# Estimador
p_gorro <- epsilon_sigma + (1/n) * sum(X)
return(p_gorro)
}
# sigma = 0
cte <- rep(0.5,1000)
x <- 1:1000
# Dataframe para almacenar los resultados
resultados_0 <- data.frame(n = numeric(), sigma = numeric(), p_gorro = numeric())
for (n in x) {
# Calcular el estimador usando la función
p_gorro <- calcular_estimador(n, 0)
# Almacenar los resultados
resultados_0 <- rbind(resultados, data.frame(n = n, sigma = 0, p_gorro = p_gorro))
}
# Mediana
# definir espacio donde se va a evaluar ll_plot
mu_d <- seq(26, 28, length.out = 10)
sigma_d <- seq(01, 3, length.out = 10)
likelihood_d <- outer(X=mu_d, Y=sigma_d, ll_plot)
# Mediana
# definir espacio donde se va a evaluar ll_plot
mu_d <- seq(26, 28, length.out = 10)
sigma_d <- seq(0.01, 3, length.out = 10)
likelihood_d <- outer(X=mu_d, Y=sigma_d, ll_plot)
# Mediana
# definir espacio donde se va a evaluar ll_plot
mu_d <- seq(26, 28, length.out = 100)
sigma_d <- seq(0.01, 3, length.out = 100)
likelihood_d <- outer(X=mu_d, Y=sigma_d, ll_plot)
# Mediana
ll_plot_mediana <- Vectorize(ll_plot_mediana)
# definir espacio donde se va a evaluar ll_plot
mu_d <- seq(26, 28, length.out = 100)
sigma_d <- seq(0.01, 3, length.out = 100)
likelihood_d <- outer(X=mu_d, Y=sigma_d, ll_plot)
# Mediana
ll_plot_mediana <- Vectorize(ll_plot_mediana)
# definir espacio donde se va a evaluar ll_plot
mu_d <- seq(25, 35, length.out = 100)
sigma_d <- seq(1, 5, length.out = 100)
# Evaluar la log likelihood en el espacio de (mu, sigma)
likelihood_d <- outer(X = mu_d, Y = sigma_d, ll_plot_mediana)
# Graficar el resultado
filled.contour(x = mu_d, y = sigma_d, z = likelihood_d, xlab = expression(mu),
ylab = expression(sigma), color = topo.colors,
main = "Log Likelihood para la Mediana")
# Mediana
ll_plot_mediana <- Vectorize(ll_plot_mediana)
mu_d <- seq(25, 35, length.out = 100)
sigma_d <- seq(1, 5, length.out = 100)
likelihood_d <- outer(X = mu_d, Y = sigma_d, ll_plot_mediana)
filled.contour(x = mu_d, y = sigma_d, z = likelihood_d, xlab = expression(mu),
ylab = expression(sigma), color = topo.colors,
main = "Log Likelihood para la Mediana")
# Mediana
ll_plot_mediana <- Vectorize(ll_plot_mediana)
mu_d <- seq(27, 28, length.out = 100)
sigma_d <- seq(0.01, 1, length.out = 100)
likelihood_d <- outer(X = mu_d, Y = sigma_d, ll_plot_mediana)
filled.contour(x = mu_d, y = sigma_d, z = likelihood_d, xlab = expression(mu),
ylab = expression(sigma), color = topo.colors,
main = "Log Likelihood para la Mediana")
# Mediana
ll_plot_mediana <- Vectorize(ll_plot_mediana)
mu_d <- seq(27, 28, length.out = 10)
sigma_d <- seq(0.01, 1, length.out = 10)
likelihood_d <- outer(X = mu_d, Y = sigma_d, ll_plot_mediana)
filled.contour(x = mu_d, y = sigma_d, z = likelihood_d, xlab = expression(mu),
ylab = expression(sigma), color = topo.colors,
main = "Log Likelihood para la Mediana")
likelihood_mean <- function(param) {
# Definimos los parametros de entrada de la funcion
mu <- param[1]
sigma <- param[2]
# Definimos la likelihood como la suma logarítmica de la función de densidad
log_likelihood <- -sum(dnorm(means, mean = mu, sd = sigma, log = TRUE))
return(log_likelihood)
}
# Agrrgue el rango donde operará nlminb
result_mean <- nlminb(objective = likelihood_mean,
start = c(mu = 27, sigma = 1),  # Valores iniciales
lower = c(mu = 26, sigma = 0),  # Límite inferior
upper = c(mu = 28, sigma = 2))   # Límite superior
# Mostrar los resultados
cat("Estimación por Máxima Verosimilitud para la media:\n")
cat("Mu óptimo:", result_mean$par[1], "\n")
cat("Sigma óptimo:", result_mean$par[2], "\n")
likelihood_med <- function(param) {
# Definimos los parametros de entrada de la funcion
mu <- param[1]
sigma <- param[2]
# Definimos la likelihood como la suma logarítmica de la función de densidad
log_likelihood <- -sum(dnorm(medis, mean = mu, sd = sigma, log = TRUE))
return(log_likelihood)
}
# Agrrgue el rango donde operará nlminb
result_med <- nlminb(objective = likelihood_med,
start = c(mu = 27, sigma = 1),  # Valores iniciales
lower = c(mu = 26, sigma = 0),  # Límite inferior
upper = c(mu = 28, sigma = 2))   # Límite superior
cat("Estimación por Máxima Verosimilitud para la mediana:\n")
cat("Mu óptimo:", result_med$par[1], "\n")
cat("Sigma óptimo:", result_med$par[2], "\n")
# Muestra de medias
mu_media <- 27.32434
sigma_media <- 0.663372
n_muestra <- 10000
muestras_media <- rnorm(n_muestra, mean = mu_media, sd = sigma_media)
df_muestras_media <- data.frame(muestras_media)
# Histogrmas
hist_media_simulada <- ggplot(df_muestras_media, aes(x = muestras_media)) +
geom_histogram(binwidth = 0.1, fill = "blue", color = "white") +
ggtitle("Histograma de Medias Simuladas") +
theme_minimal()
hist_media_simulada
# Muestra de medianas
mu_mediana <- 27.30507
sigma_mediana <- 0.1025046
n_muestra <- 10000
muestras_mediana <- rnorm(n_muestra, mean = mu_mediana, sd = sigma_mediana)
df_muestras_mediana <- data.frame(muestras_mediana)
# Histogrmas
hist_mediana_simulada <- ggplot(df_muestras_mediana, aes(x = muestras_mediana)) +
geom_histogram(binwidth = 0.1, fill = "green", color = "white") +
ggtitle("Histograma de Medianas Simuladas") +
theme_minimal()
hist_mediana_simulada
